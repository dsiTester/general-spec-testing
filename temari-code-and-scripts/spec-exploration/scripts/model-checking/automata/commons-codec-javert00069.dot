digraph Automaton {
  rankdir = LR;
  0 [shape=circle,label="s1"];
  1 [shape=circle,label="s3"];
  2 [shape=circle,label="s4"];
  3 [shape=circle,label="s2"];
  4 [shape=circle,label="s6_s5"];
  5 [shape=doublecircle,label="s0"];
  initial [shape=plaintext,label=""];
  initial -> 5
  4 -> 4 [label="org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(Ljava/lang/CharSequence;I)Z"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getI()I"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.Rule.getPattern()Ljava/lang/String;"];
  5 -> 0 [label="org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.assertNotEmpty(Lorg/apache/commons/codec/language/bm/BeiderMorseEncoder;Ljava/lang/String;)V"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.isFound()Z"];
  1 -> 2 [label="org.apache.commons.codec.language.bm.Lang.guessLanguages(Ljava/lang/String;)Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;Ljava/util/Map;)Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()Lorg/apache/commons/codec/language/bm/PhoneticEngine$RulesApplication;"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.Rule$Phoneme.getLanguages()Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.Rule$RPattern.isMatch(Ljava/lang/CharSequence;)Z"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.getPhonemes()Ljava/util/Set;"];
  2 -> 2 [label="org.apache.commons.codec.language.bm.Lang$LangRule.matches(Ljava/lang/String;)Z"];
  2 -> 4 [label="org.apache.commons.codec.language.bm.PhoneticEngine.encode(Ljava/lang/String;Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Ljava/lang/String;"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.Rule$Phoneme$1.compare(Lorg/apache/commons/codec/language/bm/Rule$Phoneme;Lorg/apache/commons/codec/language/bm/Rule$Phoneme;)I"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.Languages$LanguageSet.isSingleton()Z"];
  4 -> 4 [label="org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication.getPhonemeBuilder()Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;"];
  4 -> 5 [label="org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder.makeString()Ljava/lang/String;"];
  3 -> 1 [label="org.apache.commons.codec.language.bm.PhoneticEngine.encode(Ljava/lang/String;)Ljava/lang/String;"];
  0 -> 3 [label="org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(Ljava/lang/String;)Ljava/lang/String;"];
}
