[
    {
        "iid": 1,
        "inspection-start-time": "2021-12-03-14-04",
        "project": "commons-fileupload",
        "spec-id": "00001",
        "method-a": "org.apache.commons.fileupload2.DefaultFileItem.getStoreLocation()Ljava/io/File;",
        "method-b": "org.apache.commons.fileupload2.FileItem.delete()V",
        "method-a-return-type": "java.io.File",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00001.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DefaultFileItemTest#testAboveThresholdDefaultRepository",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [ { "method-a-site": "DefaultFileItemTest.java:195", "method-b-site": "DefaultFileItemTest.java:204", "invocation-count": 1 } ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. Replaces with null since there were no other File objects initialized.",
                "notes": "ORDER_OF_ASSERTIONS - since the assertions checking the return value of method-a were between method-a and method-b, the DSI experiment resulted in a stage-0-failure. However, if the assertions were moved after the call to the caller of method-b, they will fail because of the state changes that the caller of method-b makes."
            },
            {
                "test": "org.apache.commons.fileupload2.DefaultFileItemTest#testAboveThresholdSpecifiedRepository",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [ { "method-a-site": "DefaultFileItemTest.java:195", "method-b-site": "DefaultFileItemTest.java:204", "invocation-count": 1 } ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. Replaces with File object that was initialized that beginning of test.",
                "notes": "ORDER_OF_ASSERTIONS - since the assertions checking the return value of method-a were between method-a and method-b, the DSI experiment resulted in a stage-0-failure. However, if the assertions were moved after the call to the caller of method-b, they will fail because of the state changes that the caller of method-b makes."
            }
        ],
        "verdict": "true-spec",
        "spec-type": "postcondition",
        "validating-test-file": "org.apache.commons.fileupload2.DefaultFileItemTest#testAboveThresholdSpecifiedRepository",
        "notes": "DYNAMIC_DISPATCH. This spec will not be validated if the oracles are weak. Interestingly, method-b calls method-a (REVERSE_NBP) - however, one cannot call method-a after method-b has finished its execution.",
        "findings": "Type-b: method-a is never followed by method-b",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2021-12-03-15-05",
        "inspection-time-in-minutes": 33
    },
    {
        "iid": 2,
        "inspection-start-time": "2021-12-10-17-15",
        "project": "commons-fileupload",
        "spec-id": "00007",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00007.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            },
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "EXPECTED_EXCEPTION"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Possibly our first no-break-pass case! Snippet clearly shows that method-a calls method-b. Refer to comment-on-return-values as to why we end up with a stage-0-failure. DYNAMIC_DISPATCH",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-17-38",
        "inspection-time-in-minutes": 23
    },
    {
        "iid": 3,
        "inspection-start-time": "2021-12-10-17-46",
        "project": "commons-fileupload",
        "spec-id": "00008",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00008.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Snippet clearly shows that method-a calls method-b. Refer to comment-on-return-values as to why we end up with a stage-0-failure.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-17-53",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 4,
        "inspection-start-time": "2021-12-10-18-04",
        "project": "commons-fileupload",
        "spec-id": "00009",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00009.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Another no-break-pass case, method-b here is the immediate caller of method-b in 00008. Snippet clearly shows that method-a calls method-b. Refer to comment-on-return-values as to why we end up with a stage-0-failure.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-18-12",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 5,
        "inspection-start-time": "2021-12-10-18-13",
        "project": "commons-fileupload",
        "spec-id": "00010",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00010.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Another no-break-pass case - snippet shows that method-a clearly calls method-b. Snippet clearly shows that method-a calls method-b. Refer to comment-on-return-values as to why we end up with a stage-0-failure.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-18-22",
        "inspection-time-in-minutes": 9
    },
    {
        "iid": 6,
        "inspection-start-time": "2021-12-10-18-24",
        "project": "commons-fileupload",
        "spec-id": "00011",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00011.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Snippet clearly shows that method-a calls method-b. Refer to comment-on-return-values as to why we end up with a stage-0-failure.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-18-30",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 7,
        "inspection-start-time": "2021-12-10-18-34",
        "project": "commons-fileupload",
        "spec-id": "00012",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00012.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "no-break-pass case; method-b from this spec is the immediate caller of method-b from 00011. Snippet clearly shows that method-a calls method-b. Refer to comment-on-return-values as to why we end up with a stage-0-failure.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-18-38",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 8,
        "inspection-start-time": "2021-12-10-18-38",
        "project": "commons-fileupload",
        "spec-id": "00013",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00013.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            },
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:52",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Less about return values, but more about exceptions. The test expected method-a to throw an exception, but when DSI delayed, method-a was not called. So, the assertion failed.",
                "notes": "EXPECTED_EXCEPTION"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "This spec is interesting because it shows a case of unknown where the test expects method-a to throw an exception, but it doesn't (because DSI delayed the method call)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-18-55",
        "inspection-time-in-minutes": 17
    },
    {
        "iid": 9,
        "inspection-start-time": "2021-12-10-19-47",
        "project": "commons-fileupload",
        "spec-id": "00014",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00014.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-19-57",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 10,
        "inspection-start-time": "2021-12-10-19-58",
        "project": "commons-fileupload",
        "spec-id": "00015",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00015.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-20-06",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 11,
        "inspection-start-time": "2021-12-10-20-06",
        "project": "commons-fileupload",
        "spec-id": "00016",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.util.List",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00016.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:90",
                        "method-b-site": "FileUploadBase.java:287",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. method-a returns List<FileItem>, which is not initialized/used in any other part of the code. Hence, DSI will replace the return value with null. However, the next line is an assertNotNull on the return value of method-a, and so we end up with a stage-0-failure.",
                "notes": "(Not order of assertions because the assertion is technically after the call to method-a and method-b)"
            },
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:52",
                        "method-b-site": "FileUploadBase.java:287",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Less about return values, but more about exceptions. The test expected method-a to throw an exception, but when DSI delayed, method-a was not called. So, the assertion failed.",
                "notes": "EXPECTED_EXCEPTION"
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "This spec is interesting because it shows a case of unknown where the test expects method-a to throw an exception, but it doesn't (because DSI delayed the method call)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-20-16",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 12,
        "inspection-start-time": "2021-12-14-14-00",
        "project": "commons-fileupload",
        "spec-id": "00035",
        "method-a": "org.apache.commons.fileupload2.FileItem.get()[B",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getSize()J",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00035.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR"
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "NA",
        "validating-test-file": "?",
        "notes": "We don't know the exact invocation locations of method-a and method-b because of the ASM error, but the used implementation of method-a calls method-b, so this is a NBP.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-14-14-07",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 13,
        "inspection-start-time": "2021-12-12-17-20",
        "project": "commons-fileupload",
        "spec-id": "00037",
        "method-a": "org.apache.commons.fileupload2.FileItem.get()[B",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.isInMemory()Z",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "boolean",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00037.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:84",
                        "method-b-site": "DiskFileItem.java:301",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Here, DSI replaces method-a with null, which causes a NullPointerException on the subsequent line (leading to a stage-0-failure).",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-12-17-28",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 14,
        "inspection-start-time": "2021-12-14-14-14",
        "project": "commons-fileupload",
        "spec-id": "00040",
        "method-a": "org.apache.commons.fileupload2.FileItem.getFieldName()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileItem.get()[B",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "byte[]",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00040.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:83",
                        "method-b-site": "SizesTest.java:84",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. It seems like DSI finds a replacement value that is not null (\"\"), but I don't know where the empty string came from. ASSERTION MESSAGE: org.junit.ComparisonFailure: expected:<[field0]> but was:<[]>",
                "notes": "ORDER_OF_ASSERTIONS"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
        "notes": "Both method-a and method-b are getters, and there seems to be no real relationship between them (method-a is a naive getter, method-b is a bit more complicated). (Potentially UNRELATED_STATELESS_METHODS.)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-14-14-30",
        "inspection-time-in-minutes": 16
    },
    {
        "iid": 15,
        "inspection-start-time": "2021-12-18-18-08",
        "project": "commons-fileupload",
        "spec-id": "00044",
        "method-a": "org.apache.commons.fileupload2.FileItem.getFieldName()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.isInMemory()Z",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "boolean",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00044.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:151",
                        "method-b-site": "DiskFileItem.java:301",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "It seems like DSI finds a replacement value that is not null (\"\"), but I don't know where the empty string came from. ASSERTION MESSAGE: org.junit.ComparisonFailure: expected:<[field0]> but was:<[]>",
                "notes": "ORDER_OF_ASSERTIONS"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135 with lines 151 and 152 swapped.",
        "notes": "The test fails because the replacement value did not equal the value that the return value of method-a was being compared with. When looking through the snippets, it is evident that since the only implementation of method-a is a simple getter, it cannot impact the state; and the same can be said about method-b. So, this is not a true spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-18-22",
        "inspection-time-in-minutes": 14
    },
    {
        "iid": 16,
        "inspection-start-time": "2021-12-16-13-17",
        "project": "commons-fileupload",
        "spec-id": "00056",
        "method-a": "org.apache.commons.fileupload2.FileItem.getOutputStream()Ljava/io/OutputStream;",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getSize()J",
        "method-a-return-type": "java.io.OutputStream",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00056.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR"
            }
        ],
        "verdict": "true-spec",
        "spec-type": "precondition",
        "validating-test-file": "Refer to ModifiedDiskFileItemSerializeTest.testAboveThreshold() in code-snippet.",
        "notes": "Upon inspection of the implementation of method-a and the definition of method-b, there is a scenario in which one would have to call method-a before method-b (refer to code-snippets), so I think this is a true-spec. (Similar to 00049) Also was able to back up my findings via a modified test (refer to validating-test-file) - the modified test will end up with a NullPointerException while method-b is executed.",
        "findings": "Type-c: method-b is always preceded by method-a",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2021-12-16-13-24",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 17,
        "inspection-start-time": "2021-12-16-16-04",
        "project": "commons-fileupload",
        "spec-id": "00068",
        "method-a": "org.apache.commons.fileupload2.FileItem.getSize()J",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getSize()J",
        "method-a-return-type": "long",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00068.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR"
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "",
        "notes": "Because of the asm error, it's not entirely sure where method-a and method-b are called. However, method-b is the implementation of interface method method-a, so I'm curious about two things: 1) How can DSI forsee situations like this? and 2) how come the above test was the **Only** test from which this spec was mined? Maybe I'm misunderstanding where method-a and method-b were being called...",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-16-16-14",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 18,
        "inspection-start-time": "2021-12-17-20-06",
        "project": "commons-fileupload",
        "spec-id": "00085",
        "method-a": "org.apache.commons.fileupload2.FileItem.isInMemory()Z",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getSize()J",
        "method-a-return-type": "boolean",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00085.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold with lines 168 and 169 switched",
        "notes": "DYNAMIC_DISPATCH. Because of the asm error, the locations aren't entirely clear. However, looking at the implementation of method-a and the definition of method-b, it is clear that these two methods are unrelated getters.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-17-20-13",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 19,
        "inspection-start-time": "2021-12-18-18-39",
        "project": "commons-fileupload",
        "spec-id": "00094",
        "method-a": "org.apache.commons.fileupload2.FileItemFactory.createItem(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/fileupload2/FileItem;",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItemFactory.getFileCleaningTracker()Lorg/apache/commons/io/FileCleaningTracker;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItem",
        "method-b-return-type": "org.apache.commons.io.FileCleaningTracker",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 9,
        "code-snippets-file": "snippets/u/00094.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemSerializeTest.java:205",
                        "method-b-site": "DiskFileItemFactory.java:203",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which immediately failed on the next line, which checked the return value of method-a with an assertNotNull(). DSI replaces with null on each test that it used to validate this spec.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
        "notes": "As snippets show, the used implementation of method-a clearly calls method-b. Thus, a direct no-break-pass.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-18-53",
        "inspection-time-in-minutes": 14
    },
    {
        "iid": 20,
        "inspection-start-time": "2021-12-21-16-02",
        "project": "commons-fileupload",
        "spec-id": "00101",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.getFieldName()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getName()Ljava/lang/String;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00101.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:262",
                        "method-b-site": "SizesTest.java:263",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. DSI replaced the return value of method-a (String) with the nearest defined string, which was request. However, that failed the assertEquals.",
                "notes": "ORDER_OF_ASSERTIONS"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength with lines 262 and 263 of SizesTest switched in order.",
        "notes": "While method-b could potentially throw an exception, the values that it and the methods that it calls do not deal with fieldName (the value that method-a retrieves). Method-a is a 1-line getter (ONE_STATELESS_METHOD).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-21-16-13",
        "inspection-time-in-minutes": 11
    },
    {
        "iid": 21,
        "inspection-start-time": "2021-12-21-21-25",
        "project": "commons-fileupload",
        "spec-id": "00106",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.getName()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.close()V",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00106.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:263",
                        "method-b-site": "FileUploadBase.java:1032",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_UNEXPECTED_OUTPUT. The replacement value was request (defined in the first line of the test), and that was not equal to the value that the return value of method-a was compared against.",
                "notes": "ORDER_OF_ASSERTIONS"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength with SizesTest.java:263 cut and pasted to immediately after line 273.",
        "notes": "DYNAMIC_DISPATCH. While method-b changes state by closing an InputStream, the field variable one can retrieve by calling method-a (name) is not affected by this state change.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-21-21-36",
        "inspection-time-in-minutes": 11
    },
    {
        "iid": 22,
        "inspection-start-time": "2021-12-22-00-13",
        "project": "commons-fileupload",
        "spec-id": "00112",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.openStream()Ljava/io/InputStream;",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getHeaders()Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "java.io.InputStream",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/u/00112.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:347",
                        "method-b-site": "FileUploadBase.java:354",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a replacement value for the return value of method-a, so it replaced with null, causing a NullPointerException",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "Run the test with modifiedParseRequest() from the snippet",
        "notes": "Method-b is a 1-line getter, and method-a can change state via a potential exception. However, the potential exception is not impacted by/does not impact the value that method-b returns (headers).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-00-34",
        "inspection-time-in-minutes": 21
    },
    {
        "iid": 23,
        "inspection-start-time": "2021-12-22-00-34",
        "project": "commons-fileupload",
        "spec-id": "00113",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.openStream()Ljava/io/InputStream;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.close()V",
        "method-a-return-type": "java.io.InputStream",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 2,
        "test-methods-mine-count": 6,
        "code-snippets-file": "snippets/u/00113.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ProgressListenerTest#testProgressListener",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "ProgressListenerTest.java:111",
                        "method-b-site": "FileUploadBase.java:1032",
                        "invocation-count": 1024
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. Upon the test trying to use the return value from method-a in line ProgressListenerTest.java:120, it threw a NullPointerException",
                "notes": ""
            }
        ],
        "verdict": "true-spec",
        "spec-type": "precondition",
        "validating-test-file": "A simple test calling method-b before method-a with no other strings attached.",
        "notes": "This is a clear pre/postcondition relationship (open and close). method-a will throw an exception if the stream variable is closed - which is what method-b does.",
        "findings": "Type-b: method-b is never followed by method-a",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2021-12-22-00-54",
        "inspection-time-in-minutes": 20
    },
    {
        "iid": 24,
        "inspection-start-time": "2021-12-22-00-55",
        "project": "commons-fileupload",
        "spec-id": "00114",
        "method-a": "org.apache.commons.fileupload2.FileUpload.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00114.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ProgressListenerTest#testProgressListener",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "ServletFileUpload.java:152",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 2
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a replacement value for the return value of method-a, so it replaced with null, causing a NullPointerException at ProgressListenerTest.java:110",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "DYNAMIC_DISPATCH - method-a was never defined in the parent class.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-01-08",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 25,
        "inspection-start-time": "2021-12-22-01-08",
        "project": "commons-fileupload",
        "spec-id": "00115",
        "method-a": "org.apache.commons.fileupload2.FileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00115.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "Util.java:46",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a replacement value for the return value of method-a, so it replaced with null, causing a NullPointerException at SizesTest.java:75",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "refer to snippet",
        "notes": "Snippet clearly shows that method-a calls method-b.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-01-19",
        "inspection-time-in-minutes": 11
    },
    {
        "iid": 26,
        "inspection-start-time": "2021-12-22-01-20",
        "project": "commons-fileupload",
        "spec-id": "00116",
        "method-a": "org.apache.commons.fileupload2.FileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00116.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "Util.java:46",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a replacement value for the return value of method-a, so it replaced with null, causing a NullPointerException at SizesTest.java:75",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "refer to snippet",
        "notes": "Snippet clearly shows that method-a calls method-b.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-01-26",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 27,
        "inspection-start-time": "2021-12-22-01-27",
        "project": "commons-fileupload",
        "spec-id": "00117",
        "method-a": "org.apache.commons.fileupload2.FileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00117.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "Util.java:46",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a replacement value for the return value of method-a, so it replaced with null, causing a NullPointerException at SizesTest.java:75",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "refer to snippet",
        "notes": "Snippet clearly shows that method-a calls method-b.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-01-30",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 28,
        "inspection-start-time": "2021-12-22-13-01",
        "project": "commons-fileupload",
        "spec-id": "00124",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl.getContentLength(Lorg/apache/commons/fileupload2/FileItemHeaders;)J",
        "method-b": "org.apache.commons.fileupload2.FileItemIterator.next()Lorg/apache/commons/fileupload2/FileItemStream;",
        "method-a-return-type": "long",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemStream",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00124.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec)"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "?",
        "notes": "Due to the ASM error, I'm having difficulty figuring out where the two methods are called, and how often... The definition of method-a returns a long value after parsing a particular value from its argument. method-b accesses the field variables FileItemIteratorImpl.eof, FileItemIteratorImpl.itemValid, calls FileItemIteratorImpl.hasNext(), modifies FileItemIteratorImpl.itemValid, and returns the field variable FileItemIteratorImpl.currentItem. Since there is no connection between the two methods, I think this is a case of UNRELATED_STATEFUL_METHODS.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-13-25",
        "inspection-time-in-minutes": 24
    },
    {
        "iid": 29,
        "inspection-start-time": "2021-12-22-13-36",
        "project": "commons-fileupload",
        "spec-id": "00125",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.getPermittedSize()J",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$SizeException.getPermittedSize()J",
        "method-a-return-type": "long",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00125.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec). Also EXPECTED_EXCEPTION - the two methods are methods from the Exception class that the test checks for after expecting an exception"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "snippet",
        "notes": "DYNAMIC_DISPATCH_SAME_METHOD. This is a vacuous spec because method-a and method-b are actually the same method - method-a is in the subclass, but the subclass doesn't have a definition for the method, so the definition in the superclass is called (method-b). How can we detect cases like this?",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-13-44",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 30,
        "inspection-start-time": "2021-12-22-13-44",
        "project": "commons-fileupload",
        "spec-id": "00126",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.setFieldName(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.getPermittedSize()J",
        "method-a-return-type": "void",
        "method-b-return-type": "long",
        "same-class": "yes",
        "all-tests-mined": true,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00126.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec). Also EXPECTED_EXCEPTION - the two methods are methods from the Exception class that the test checks for after expecting an exception"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "snippet",
        "notes": "While the asm error makes it difficult for one to figure out where exactly method-a was called, from the snippets it is evident that while method-a sets state, that state does not impact the value that method-b retrieves (ONE_STATELESS_METHOD).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-13-56",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 31,
        "inspection-start-time": "2021-12-22-15-04",
        "project": "commons-fileupload",
        "spec-id": "00128",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.setFieldName(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$SizeException.getPermittedSize()J",
        "method-a-return-type": "void",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00128.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec). Also EXPECTED_EXCEPTION - the two methods are methods from the Exception class that the test checks for after expecting an exception"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "snippet",
        "notes": "While the asm error makes it difficult for one to figure out where exactly method-a was called, from the snippets it is evident that while method-a sets state, that state does not impact the value that method-b retrieves (ONE_STATELESS_METHOD). (Very similar to 00126 - the method-b here is the superclass version (the same method) as the method-b in 00126 - DYNAMIC_DISPATCH.)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-15-10",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 32,
        "inspection-start-time": "2021-12-22-15-10",
        "project": "commons-fileupload",
        "spec-id": "00129",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.setFileName(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.getPermittedSize()J",
        "method-a-return-type": "void",
        "method-b-return-type": "long",
        "same-class": "yes",
        "all-tests-mined": true,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00129.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec). Also EXPECTED_EXCEPTION - the two methods are methods from the Exception class that the test checks for after expecting an exception"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "definitions from snippet",
        "notes": "While the asm error makes it difficult for one to figure out where exactly method-a was called, from the snippets it is evident that while method-a sets state, that state does not impact the value that method-b retrieves (ONE_STATELESS_METHOD).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-15-17",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 33,
        "inspection-start-time": "2021-12-22-15-18",
        "project": "commons-fileupload",
        "spec-id": "00130",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.setFileName(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$SizeException.getPermittedSize()J",
        "method-a-return-type": "void",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00130.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec). Also EXPECTED_EXCEPTION - the two methods are methods from the Exception class that the test checks for after expecting an exception"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "definitions from snippet",
        "notes": "While the asm error makes it difficult for one to figure out where exactly method-a was called, from the snippets it is evident that while method-a sets state, that state does not impact the value that method-b retrieves (ONE_STATELESS_METHOD). (Very similar to 00129 - the method-b here is the superclass version (the same method) as the method-b in 00129 - DYNAMIC_DISPATCH.)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-15-24",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 34,
        "inspection-start-time": "2021-12-22-16-38",
        "project": "commons-fileupload",
        "spec-id": "00131",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$SizeLimitExceededException.getPermittedSize()J",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$SizeException.getPermittedSize()J",
        "method-a-return-type": "long",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00131.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimit",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec). Also EXPECTED_EXCEPTION - the two methods are methods from the Exception class that the test checks for after expecting an exception"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "precondition",
        "validating-test-file": "definitions from snippet",
        "notes": "DYNAMIC_DISPATCH_SAME_METHOD. This is a vacuous spec because method-a and method-b are actually the same method - method-a is in the subclass, but the subclass doesn't have a definition for the method, so the definition in the superclass is called (method-b). How can we detect cases like this? (ONE_STATELESS_METHOD)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-16-46",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 35,
        "inspection-start-time": "2021-12-22-16-47",
        "project": "commons-fileupload",
        "spec-id": "00132",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00132.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1001",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which caused the program to enter the (boundary == null) branch, throwing the FileUploadException (somewhat like NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION?, but not a NullPointerException).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "definitions from snippet",
        "notes": "The way that method-a and method-b are called are quite convoluted, but from their definitions, one can see that both methods are getters that don't impact each other.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-17-09",
        "inspection-time-in-minutes": 22
    },
    {
        "iid": 36,
        "inspection-start-time": "2021-12-22-17-09",
        "project": "commons-fileupload",
        "spec-id": "00133",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00133.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1001",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which caused the program to enter the (boundary == null) branch, throwing the FileUploadException (somewhat like NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION?, but not a NullPointerException).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "definitions from snippet",
        "notes": "The way that method-a and method-b are called are quite convoluted, but from their definitions, one can see that both methods are getters that don't impact each other.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-17-14",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 37,
        "inspection-start-time": "2021-12-22-17-14",
        "project": "commons-fileupload",
        "spec-id": "00134",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 6,
        "code-snippets-file": "snippets/u/00134.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1001",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which caused the program to enter the (boundary == null) branch, throwing the FileUploadException (somewhat like NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION?, but not a NullPointerException).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile with a print statement containing a call to method-a immediately after method-b.",
        "notes": "Seeing that both methods are getters (with the implementation of method-b being a 1-line getter - ONE_STATELESS_METHOD) that don't impact the state, this spec is a spurious spec",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-17-28",
        "inspection-time-in-minutes": 14
    },
    {
        "iid": 38,
        "inspection-start-time": "2021-12-22-18-15",
        "project": "commons-fileupload",
        "spec-id": "00135",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00135.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1001",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which caused the program to enter the (boundary == null) branch, throwing the FileUploadException (somewhat like NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION?, but not a NullPointerException).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "definitions in snippet; can write a case simply calling these two methods in reverse order",
        "notes": "UNRELATED_STATELESS_METHODS: Seeing that both methods are getters that don't impact the state, this spec is a spurious spec",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-18-30",
        "inspection-time-in-minutes": 15
    },
    {
        "iid": 39,
        "inspection-start-time": "2021-12-23-00-10",
        "project": "commons-fileupload",
        "spec-id": "00136",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00136.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1001",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which caused the program to enter the (boundary == null) branch, throwing the FileUploadException (somewhat like NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION?, but not a NullPointerException).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "definitions in snippet; can write a case simply calling these two methods in reverse order",
        "notes": "UNRELATED_STATELESS_METHODS: Seeing that both methods are getters that don't impact the state, this spec is a spurious spec. (This method-b is the caller of 00135's method-b)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-00-15",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 40,
        "inspection-start-time": "2021-12-23-00-15",
        "project": "commons-fileupload",
        "spec-id": "00137",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00137.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1001",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which caused the program to enter the (boundary == null) branch, throwing the FileUploadException (somewhat like NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION?, but not a NullPointerException).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile with modification note in FileItemIteratorImpl.findNextItem().",
        "notes": "UNRELATED_STATELESS_METHODS. Seeing that both methods are getters that don't impact the state, this spec is a spurious spec. Can call method-a immediately after the call to method-b, and the tests passed.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-00-29",
        "inspection-time-in-minutes": 14
    },
    {
        "iid": 41,
        "inspection-start-time": "2021-12-23-00-30",
        "project": "commons-fileupload",
        "spec-id": "00138",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00138.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1001",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which caused the program to enter the (boundary == null) branch, throwing the FileUploadException (somewhat like NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION?, but not a NullPointerException).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile with modification note in FileItemIteratorImpl.findNextItem().",
        "notes": "UNRELATED_STATELESS_METHODS: Seeing that both methods are getters that don't impact the state, this spec is a spurious spec. Can call method-a immediately after the call to method-b, and the tests passed. (Method-b from this spec is called from method-b of 000135)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-00-38",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 42,
        "inspection-start-time": "2021-12-23-00-38",
        "project": "commons-fileupload",
        "spec-id": "00139",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.parseHeaderLine(Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;Ljava/lang/String;)V",
        "method-a-return-type": "byte[]",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00139.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1001",
                        "method-b-site": "FileUploadBase.java:606",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI replaced the return value of method-a with null, which caused the program to enter the (boundary == null) branch, throwing the FileUploadException (somewhat like NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION?, but not a NullPointerException).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135 with modifications proposed in snippet for FileUploadBase.getParsedHeaders().",
        "notes": "Seeing that both methods are getters that don't impact the state, this spec is a spurious spec. Can call method-a immediately after the call to method-b, and the tests passed. Interesting how StreamingTest#testFILEUPLOAD135 is the only test that mines the spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-00-57",
        "inspection-time-in-minutes": 19
    },
    {
        "iid": 43,
        "inspection-start-time": "2021-12-23-13-38",
        "project": "commons-fileupload",
        "spec-id": "00143",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00143.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1056",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "The replacement value is not clear, but the test oracles in the test don't check for the affected value (fieldName). Hence the test is weak.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippets",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-13-50",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 44,
        "inspection-start-time": "2021-12-23-16-46",
        "project": "commons-fileupload",
        "spec-id": "00149",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00149.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1069",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "The replacement value is not clear, but the test oracles in the test don't check for the affected value (fileName). Hence the test is weak.",
                "notes": "The experiment didn't get past stage-0-failure because method-a calls method-b, but the test itself did pass."
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippets",
        "notes": "method-a is a wrapper around method-b.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-16-52",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 45,
        "inspection-start-time": "2021-12-23-16-53",
        "project": "commons-fileupload",
        "spec-id": "00150",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "byte[]",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 10,
        "code-snippets-file": "snippets/u/00150.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:333",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a substitute, so it replaced the return value of method-a with null; causing a NullPointerException at FileUploadBase.java:339.",
                "notes": "Technically EXPECTED_EXCEPTION, but the exception is not related to either two of the methods in the spec."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippet",
        "notes": "method-a indirectly calls method-b, as evident in the snippet.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-17-08",
        "inspection-time-in-minutes": 15
    },
    {
        "iid": 46,
        "inspection-start-time": "2021-12-23-17-09",
        "project": "commons-fileupload",
        "spec-id": "00151",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00151.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:333",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a substitute, so it replaced the return value of method-a with null; causing a NullPointerException at FileUploadBase.java:339.",
                "notes": "Technically EXPECTED_EXCEPTION, but the exception is not related to either two of the methods in the spec."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippet",
        "notes": "method-a indirectly calls method-b, as evident in the snippet",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-17-30",
        "inspection-time-in-minutes": 21
    },
    {
        "iid": 47,
        "inspection-start-time": "2021-12-23-18-58",
        "project": "commons-fileupload",
        "spec-id": "00152",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00152.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:333",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a substitute, so it replaced the return value of method-a with null; causing a NullPointerException at FileUploadBase.java:339.",
                "notes": "Technically EXPECTED_EXCEPTION, but the exception is not related to either two of the methods in the spec."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippet",
        "notes": "method-a indirectly calls method-b, as evident in the snippet. (The method-b here is the caller of the method-b of 00151, and only does set-up work for the method-b in 00151 otherwise)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-19-04",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 48,
        "inspection-start-time": "2021-12-24-18-26",
        "project": "commons-fileupload",
        "spec-id": "00154",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00154.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:333",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a substitute, so it replaced the return value of method-a with null; causing a NullPointerException at FileUploadBase.java:339.",
                "notes": "Technically EXPECTED_EXCEPTION, but the exception is not related to either two of the methods in the spec."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-24-18-45",
        "inspection-time-in-minutes": 19
    },
    {
        "iid": 49,
        "inspection-start-time": "2021-12-24-19-10",
        "project": "commons-fileupload",
        "spec-id": "00155",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00155.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:333",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a substitute, so it replaced the return value of method-a with null; causing a NullPointerException at FileUploadBase.java:339.",
                "notes": "Technically EXPECTED_EXCEPTION, but the exception is not related to either two of the methods in the spec."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippet",
        "notes": "This spec's method-b is the caller of the method-b from 00154.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-24-19-14",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 50,
        "inspection-start-time": "2021-12-24-19-14",
        "project": "commons-fileupload",
        "spec-id": "00156",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00156.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:333",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a substitute, so it replaced the return value of method-a with null; causing a NullPointerException at FileUploadBase.java:339.",
                "notes": "Technically EXPECTED_EXCEPTION, but the exception is not related to either two of the methods in the spec."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-24-19-20",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 51,
        "inspection-start-time": "2021-12-24-19-20",
        "project": "commons-fileupload",
        "spec-id": "00157",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00157.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:333",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a substitute, so it replaced the return value of method-a with null; causing a NullPointerException at FileUploadBase.java:339.",
                "notes": "Technically EXPECTED_EXCEPTION, but the exception is not related to either two of the methods in the spec."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippet",
        "notes": "The method-b of this spec is called from the method-b of 00156, so transitively there is a no-break-pass relationship between method-a and method-b",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-24-19-24",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 52,
        "inspection-start-time": "2021-12-14-19-24",
        "project": "commons-fileupload",
        "spec-id": "00158",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.parseHeaderLine(Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;Ljava/lang/String;)V",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00158.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:333",
                        "method-b-site": "FileUploadBase.java:606",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. DSI couldn't find a substitute, so it replaced the return value of method-a with null; causing a NullPointerException at FileUploadBase.java:339.",
                "notes": "Technically EXPECTED_EXCEPTION, but the exception is not related to either two of the methods in the spec."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as observed from snippet",
        "notes": "The method-b of this spec is called from the method-b of 00156, so transitively there is a no-break-pass relationship between method-a and method-b",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-24-19-32",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 53,
        "inspection-start-time": "2021-01-03-10-30",
        "project": "commons-fileupload",
        "spec-id": "00159",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00159.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1053",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:503.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to the DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit with TODO changes in snippet shows the connection between method-a and method-b.",
        "notes": "The wrapper for method-b uses the return value of method-a as an argument, does some computation on it and passes the result to method-b (evident in the snippets), so there seems to be some relationship between method-a and method-b. When one tries to circumvent the call to method-a (ex. the TODO changes in the snippet), the headers may not get populated as they should, causing the test to fail. So, this seems like a case of CONNECTION_DOES_NOT_NECESSITATE_ORDERING, given that method-b simply takes in a String argument, even though it is a private method.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-01-03-10-54",
        "inspection-time-in-minutes": 24
    },
    {
        "iid": 54,
        "inspection-start-time": "2022-01-03-11-11",
        "project": "commons-fileupload",
        "spec-id": "00161",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00161.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1053",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:503.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to the DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "SizesTest#testFileSizeLimit with FileUploadBase.java:333 and FileUploadBase.java:334 switched.",
        "notes": "method-b is a 1-line getter that retrieves a value that is unrelated to method-a. The only places that method-b is set are the constructor of FileUpload, and FileUpload.setFileItemFactory(), which is only called from a different test. Hence, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-11-20",
        "inspection-time-in-minutes": 9
    },
    {
        "iid": 55,
        "inspection-start-time": "2022-01-03-11-21",
        "project": "commons-fileupload",
        "spec-id": "00162",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00162.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1053",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:503.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit with TODO changes in the snippet shows the connection between the two methods",
        "notes": "Similar rationale as 00159: The wrapper for method-b uses the return value of method-a as an argument, does some computation on it and passes the result to method-b (evident in the snippets), so there seems to be some relationship between method-a and method-b. When one tries to circumvent the call to method-a (ex. the TODO changes in the snippet), the headers may not get populated as they should, causing the test to fail. So, this seems like a case of CONNECTION_DOES_NOT_NECESSITATE_ORDERING, given that method-b simply takes in a String argument, even though it is a private method.",
        "findings": "The DSI experiment in this case is interesting because delaying method-a meant that the same NullPointerException as 00159/00160 happened. So while there **could** be a relationship between method-a and method-b, the experiment results in unknown because of a different precondition relationship. METHOD_B_AFTER_CRITICAL_POINT",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-01-30-11-34",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 56,
        "inspection-start-time": "2022-01-03-11-34",
        "project": "commons-fileupload",
        "spec-id": "00163",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00163.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1053",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:503.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit with change for FileUploadBase.java:1056 as proposed in snippet shows connection between method-a and method-b.",
        "notes": "The DSI experiment in this case is interesting because delaying method-a meant that the same NullPointerException as 00159/00160 happened, making this experiment result in a stage-0-failure. So while there **could** be a relationship between method-a and method-b, the experiment results in unknown because of a different precondition relationship. (METHOD_B_AFTER_CRITICAL_POINT) The return value from method-a is the argument to method-b, and since method-b does some computation on its argument assuming that the argument is not null, calling method-a successfully seems to be a prerequisite for calling method-b. However, one can obtain a FileItemHeaders object in other ways, so it may not necessarily be a true spec. Additionally, the method-b of this spec is the immediate caller of method-b from 00162. This has high potential to be a bigger spec with the other specs that have the same method-a! DECISION: both method-a and method-b are protected. In general, it seems like calling method-a before method-b would be a good idea, but technically one does not necessarily need to call method-a before calling method-b (because they can initialize a FileItemHeaders object manually and fill in the contents manually... but I'm not sure whether an user would want to do that). Additionally, calling method-a does not mean that you must call method-b afterwards.",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-01-03-11-43",
        "inspection-time-in-minutes": 9
    },
    {
        "iid": 57,
        "inspection-start-time": "2022-01-03-11-45",
        "project": "commons-fileupload",
        "spec-id": "00164",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00164.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1053",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:503.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to DSI experiment."
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-11-50",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 58,
        "inspection-start-time": "2022-01-03-11-55",
        "project": "commons-fileupload",
        "spec-id": "00165",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.parseHeaderLine(Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;Ljava/lang/String;)V",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00165.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1053",
                        "method-b-site": "FileUploadBase.java:606",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count" : 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:503.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to DSI experiment."
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "Interesting that only one test mined the spec, given that it's a no-break-pass.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-12-03",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 59,
        "inspection-start-time": "2022-01-03-12-03",
        "project": "commons-fileupload",
        "spec-id": "00166",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00166.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:580",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:685.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to the DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "precondition",
        "validating-test-file": "?",
        "notes": "In 00159 it was established that there may be a relationship between the caller of this method-a and this method-b. The caller of this method-a will throw a NullPointerException if this method-a is replaced with null (method-a returns a new FileItemHeadersImpl object, so replacing it with a new FileItemHeadersImpl object would not really be a useful replacement). Given that the caller of method-a (getParsedHeaders()), which may have a relationship with method-b (getFieldName()), would fail without method-a (newFileItemHeaders()), there transitively could be a relationship between method-a (newFileItemHeaders()) and method-b (getFieldName()). DECISION: method-a is a protected method that can be replaced with simply an instantiation of a new FileItemHeadersImpl object (which is quite literally what method-a does), and method-b is a private method that takes in a String argument, which means that one does not necessarily have to call method-a in order to supply the argument to method-b.",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-01-03-12-19",
        "inspection-time-in-minutes": 16
    },
    {
        "iid": 60,
        "inspection-start-time": "2022-01-03-12-19",
        "project": "commons-fileupload",
        "spec-id": "00167",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00167.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:580",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:685.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to the DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
        "notes": "In 00160 it was established that there is a relationship between the caller of this method-a and this method-b. The caller of this method-a will throw a NullPointerException if this method-a is replaced with null (method-a returns a new FileItemHeadersImpl object, so replacing it with a new FileItemHeadersImpl object would not really be a useful replacement). Given that the caller of method-a (getParsedHeaders()), which may have a relationship with method-b (getFieldName()), would fail without method-a (newFileItemHeaders()), there transitively could be a relationship between method-a (newFileItemHeaders()) and method-b (getFieldName()). DECISION: method-a is a protected method that can be replaced with simply an instantiation of a new FileItemHeadersImpl object (which is quite literally what method-a does). Also, this seems like a CONNECTION_DOES_NOT_NECESSITATE_ORDERING case where the connection is that method-a returns a FileItemHeadersImpl object, and method-b takes in a FileItemHeaders (the interface of FileItemHeadersImpl) object, and the use case displayed shows that the return value of method-a was modified and then passed into method-b.",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-01-03-12-30",
        "inspection-time-in-minutes": 11
    },
    {
        "iid": 61,
        "inspection-start-time": "2022-01-03-13-58",
        "project": "commons-fileupload",
        "spec-id": "00168",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00168.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:580",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:685.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to the DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "SizesTest#testFileSizeLimit with FileUploadBase.java:333 and FileUploadBase.java:334 switched.",
        "notes": "This experiment fails because getParsedHeaders() will fail when the return value of method-a is replaced with null, not because these two methods are related to each other, especially given that method-b is a 1-line getter that retrieves a value that is unrelated to method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-14-03",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 62,
        "inspection-start-time": "2022-01-03-14-04",
        "project": "commons-fileupload",
        "spec-id": "00169",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00169.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:580",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:685.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to the DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "?",
        "notes": "The caller of this method-a will throw a NullPointerException if this method-a is replaced with null (method-a returns a new FileItemHeadersImpl object, so replacing it with a new FileItemHeadersImpl object would not really be a useful replacement). Given that the caller of method-a (getParsedHeaders()), which may have a relationship with method-b (getFieldName()), would fail without method-a (newFileItemHeaders()), there transitively could be a relationship between method-a (newFileItemHeaders()) and method-b (getFileName()). DECISION: method-a is a protected method that can be replaced with simply an instantiation of a new FileItemHeadersImpl object (which is quite literally what method-a does), and method-b is a private method that takes in a String argument, which means that one does not necessarily have to call method-a in order to supply the argument to method-b.",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-01-03-14-11",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 63,
        "inspection-start-time": "2022-01-03-14-11",
        "project": "commons-fileupload",
        "spec-id": "00170",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00170.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:580",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:685.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to the DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "?",
        "notes": "The caller of this method-a will throw a NullPointerException if this method-a is replaced with null (method-a returns a new FileItemHeadersImpl object, so replacing it with a new FileItemHeadersImpl object would not really be a useful replacement). Given that the caller of method-a (getParsedHeaders()), which may have a relationship with method-b (getFieldName()), would fail without method-a (newFileItemHeaders()), there transitively could be a relationship between method-a (newFileItemHeaders()) and method-b (getFieldName()). DECISION: method-a is a protected method that can be replaced with simply an instantiation of a new FileItemHeadersImpl object (which is quite literally what method-a does). Also, this seems like a CONNECTION_DOES_NOT_NECESSITATE_ORDERING case where the connection is that method-a returns a FileItemHeadersImpl object, and method-b takes in a FileItemHeaders (the interface of FileItemHeadersImpl) object, and the use case displayed shows that the return value of method-a was modified and then passed into method-b.",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-02-03-14-17",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 64,
        "inspection-start-time": "2022-01-03-15-15",
        "project": "commons-fileupload",
        "spec-id": "00175",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseHeaderLine(Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00175.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:606",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "precondition",
        "validating-test-file": "?",
        "notes": "The wrapper method for method-b (FileUploadBase.getFileName()) takes in a FileItemHeaders object as an argument, which is provided by the method that calls method-a (FileUploadBase.getParsedHeaders()). However, if method-a is not called, the return value of getParsedHeaders() and getFieldName (FileUploadBase.java:1056) will be different, causing the control flow to change in such a way that method-b is not called (REPLACEMENT_TRIGGERS_CHECK_THAT_PREVENTS_B). This is why the experiment resulted in a stage-0-failure. Manually calling method-b without calling method-a resulted in method-b becoming null, so there seems to be a relationship between the two methods, but this is very specific so I'm not sure if this applies in the general case. So, this seems like a CONNECTION_DOES_NOT_NECESSITATE_ORDERING case - in this specific use case, method-a ought to be called before method-b, but given that method-b takes a String argument and returns a String, it seems like in general that method-b does not need method-a in order to be called.",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-01-03-15-39",
        "inspection-time-in-minutes": 24
    },
    {
        "iid": 65,
        "inspection-start-time": "2022-01-03-16-36",
        "project": "commons-fileupload",
        "spec-id": "00176",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseHeaderLine(Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00176.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:606",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "?",
        "notes": "method-b takes in a FileItemHeaders object as an argument, which is provided by the method that calls method-a (FileUploadBase.getParsedHeaders()). However, if method-a is not called, the return value of getParsedHeaders() and getFieldName (FileUploadBase.java:1056) will be different, causing the control flow to change in such a way that method-b is not called. This is why the experiment resulted in a stage-0-failure (REPLACEMENT_TRIGGERS_CHECK_THAT_PREVENTS_B). Manually calling method-b without calling method-a resulted in method-b becoming null, so there seems to be a relationship between the two methods, but this is very specific so I'm not sure if this applies in the general case. DECISION: it seems to me that method-a ought to be called before method-b in the specified use case from the test, but I don't think this holds in general (one can pass in a FileItemHeaders object to method-b without having to first go through method-a). So this seems like a CONNECTION_DOES_NOT_NECESSITATE_ORDERING case.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-16-42",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 66,
        "inspection-start-time": "2022-01-03-16-43",
        "project": "commons-fileupload",
        "spec-id": "00177",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "byte[]",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 6,
        "code-snippets-file": "snippets/u/00177.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-16-49",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 67,
        "inspection-start-time": "2022-01-03-16-49",
        "project": "commons-fileupload",
        "spec-id": "00178",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00178.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-16-55",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 68,
        "inspection-start-time": "2022-01-03-16-55",
        "project": "commons-fileupload",
        "spec-id": "00179",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00179.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-16-58",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 69,
        "inspection-start-time": "2022-01-03-16-59",
        "project": "commons-fileupload",
        "spec-id": "00180",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/u/00180.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-17-02",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 70,
        "inspection-start-time": "2022-01-03-17-04",
        "project": "commons-fileupload",
        "spec-id": "00181",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00181.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-17-09",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 71,
        "inspection-start-time": "2022-01-03-18-59",
        "project": "commons-fileupload",
        "spec-id": "00182",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00182.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-19-03",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 72,
        "inspection-start-time": "2022-01-03-19-03",
        "project": "commons-fileupload",
        "spec-id": "00183",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/u/00183.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-19-05",
        "inspection-time-in-minutes": 2
    },
    {
        "iid": 73,
        "inspection-start-time": "2022-01-03-19-05",
        "project": "commons-fileupload",
        "spec-id": "00184",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00184.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-19-09",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 74,
        "inspection-start-time": "2022-01-03-19-10",
        "project": "commons-fileupload",
        "spec-id": "00185",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00185.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-19-14",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 75,
        "inspection-start-time": "2022-01-03-19-31",
        "project": "commons-fileupload",
        "spec-id": "00186",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.parseHeaderLine(Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;Ljava/lang/String;)V",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00186.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:185",
                        "method-b-site": "FileUploadBase.java:606",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at StreamingTest.java:148.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-19-35",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 76,
        "inspection-start-time": "2022-01-04-12-51",
        "project": "commons-fileupload",
        "spec-id": "00201",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.discardBodyData()I",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.findSeparator()I",
        "method-a-return-type": "int",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00201.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "MultipartStream.java:664",
                        "method-b-site": "MultipartStream.java:848",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "The return value replacement doesn't matter here because the return value of method-a was never caught in a variable.",
                "notes": "EXPECTED_EXCEPTION_NOT_THROWN"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testIOException",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-12-58",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 77,
        "inspection-start-time": "2022-01-04-12-59",
        "project": "commons-fileupload",
        "spec-id": "00202",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.discardBodyData()I",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.newInputStream()Lorg/apache/commons/fileupload2/MultipartStream$ItemInputStream;",
        "method-a-return-type": "int",
        "method-b-return-type": "org.apache.commons.fileupload2.MultipartStream$ItemInputStream",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00202.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "MultipartStream.java:664",
                        "method-b-site": "MultipartStream.java:622",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "The return value replacement doesn't matter here because the return value of method-a was never caught in a variable.",
                "notes": "EXPECTED_EXCEPTION_NOT_THROWN"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testIOException",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-13-02",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 78,
        "inspection-start-time": "2022-01-04-13-02",
        "project": "commons-fileupload",
        "spec-id": "00203",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.discardBodyData()I",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.readBodyData(Ljava/io/OutputStream;)I",
        "method-a-return-type": "int",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00203.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "MultipartStream.java:664",
                        "method-b-site": "MultipartStream.java:646",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "The return value replacement doesn't matter here because the return value of method-a was never caught in a variable.",
                "notes": "EXPECTED_EXCEPTION_NOT_THROWN"
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testIOException",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-13-06",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 79,
        "inspection-start-time": "2022-01-04-14-44",
        "project": "commons-fileupload",
        "spec-id": "00204",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.newInputStream()Lorg/apache/commons/fileupload2/MultipartStream$ItemInputStream;",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.findSeparator()I",
        "method-a-return-type": "org.apache.commons.fileupload2.MultipartStream$ItemInputStream",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00204.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "MultipartStream.java:622",
                        "method-b-site": "MultipartStream.java:848",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at Streams.java:98/MultipartStream.java:622.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evindent from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-14-52",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 80,
        "inspection-start-time": "2022-01-04-14-53",
        "project": "commons-fileupload",
        "spec-id": "00205",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.readBodyData(Ljava/io/OutputStream;)I",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.findSeparator()I",
        "method-a-return-type": "int",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00205.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "MultipartStream.java:646",
                        "method-b-site": "MultipartStream.java:848",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "The replacement value doesn't matter here, since the caller of method-a doesn't use the return value (isn't recoded in a variable).",
                "notes": "Not calling method-a/method-b caused the EXPECTED_EXCEPTION_NOT_THROWN; causing the test to fail."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evindent from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-14-57",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 81,
        "inspection-start-time": "2022-01-04-14-58",
        "project": "commons-fileupload",
        "spec-id": "00206",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.readBodyData(Ljava/io/OutputStream;)I",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.newInputStream()Lorg/apache/commons/fileupload2/MultipartStream$ItemInputStream;",
        "method-a-return-type": "int",
        "method-b-return-type": "org.apache.commons.fileupload2.MultipartStream$ItemInputStream",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00206.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "MultipartStream.java:646",
                        "method-b-site": "MultipartStream.java:622",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "The replacement value doesn't matter here, since the caller of method-a doesn't use the return value (isn't recoded in a variable).",
                "notes": "Not calling method-a/method-b caused the EXPECTED_EXCEPTION_NOT_THROWN; causing the test to fail."
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "as evindent from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-15-05",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 82,
        "inspection-start-time": "2022-01-05-15-00",
        "project": "commons-fileupload",
        "spec-id": "00213",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.skipPreamble()Z",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.discardBodyData()I",
        "method-a-return-type": "boolean",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00213.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1038",
                        "method-b-site": "MultipartStream.java:664",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Most likely replaced with false, but it doesn't matter in this context; method-a is expected to throw an exception in this test case, so the return value would have never been used.",
                "notes": "EXPECTED_EXCEPTION_NOT_THROWN because method-a was delayed (and method-a was expected to throw an exception)."
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "as evident in snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-15-10",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 83,
        "inspection-start-time": "2022-01-05-15-10",
        "project": "commons-fileupload",
        "spec-id": "00214",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.skipPreamble()Z",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.findSeparator()I",
        "method-a-return-type": "boolean",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00214.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1038",
                        "method-b-site": "MultipartStream.java:848",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Most likely replaced with false, but it doesn't matter in this context; method-a is expected to throw an exception in this test case, so the return value would have never been used.",
                "notes": "EXPECTED_EXCEPTION_NOT_THROWN because method-a was delayed (and method-a was expected to throw an exception)."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident in snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-15-14",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 84,
        "inspection-start-time": "2022-01-05-15-14",
        "project": "commons-fileupload",
        "spec-id": "00215",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.skipPreamble()Z",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.newInputStream()Lorg/apache/commons/fileupload2/MultipartStream$ItemInputStream;",
        "method-a-return-type": "boolean",
        "method-b-return-type": "org.apache.commons.fileupload2.MultipartStream$ItemInputStream",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00215.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1038",
                        "method-b-site": "MultipartStream.java:622",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Most likely replaced with false, but it doesn't matter in this context; method-a is expected to throw an exception in this test case, so the return value would have never been used.",
                "notes": "EXPECTED_EXCEPTION_NOT_THROWN because method-a was delayed (and method-a was expected to throw an exception)."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident in snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-15-16",
        "inspection-time-in-minutes": 2
    },
    {
        "iid": 85,
        "inspection-start-time": "2022-01-05-15-16",
        "project": "commons-fileupload",
        "spec-id": "00216",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.skipPreamble()Z",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.readBodyData(Ljava/io/OutputStream;)I",
        "method-a-return-type": "boolean",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00216.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "assertion",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1038",
                        "method-b-site": "MultipartStream.java:646",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Most likely replaced with false, but it doesn't matter in this context; method-a is expected to throw an exception in this test case, so the return value would have never been used.",
                "notes": "EXPECTED_EXCEPTION_NOT_THROWN because method-a was delayed (and method-a was expected to throw an exception)."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident in snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-15-20",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 86,
        "inspection-start-time": "2022-01-05-15-42",
        "project": "commons-fileupload",
        "spec-id": "00220",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;C)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parseQuotedToken([C)Ljava/lang/String;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/u/00220.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ParameterParserTest#testContentTypeParsing",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "ParameterParserTest.java:74",
                        "method-b-site": "ParameterParser.java:314",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-15-50",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 87,
        "inspection-start-time": "2022-01-05-15-55",
        "project": "commons-fileupload",
        "spec-id": "00222",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;[C)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.getToken(Z)Ljava/lang/String;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00222.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:423",
                        "method-b-site": "ParameterParser.java:160",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:424.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-16-15",
        "inspection-time-in-minutes": 20
    },
    {
        "iid": 88,
        "inspection-start-time": "2022-01-05-17-49",
        "project": "commons-fileupload",
        "spec-id": "00223",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;[C)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;C)Ljava/util/Map;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.util.Map",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00223.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:423",
                        "method-b-site": "ParameterParser.java:244",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:424.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-17-52",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 89,
        "inspection-start-time": "2022-01-05-17-53",
        "project": "commons-fileupload",
        "spec-id": "00224",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;[C)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parse([CC)Ljava/util/Map;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.util.Map",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00224.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:423",
                        "method-b-site": "ParameterParser.java:260",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:424.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-17-57",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 90,
        "inspection-start-time": "2022-01-05-17-58",
        "project": "commons-fileupload",
        "spec-id": "00225",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;[C)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parse([CIIC)Ljava/util/Map;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.util.Map",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00225.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:423",
                        "method-b-site": "ParameterParser.java:277",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:424.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-18-03",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 91,
        "inspection-start-time": "2022-01-05-18-03",
        "project": "commons-fileupload",
        "spec-id": "00226",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;[C)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parseQuotedToken([C)Ljava/lang/String;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00226.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:423",
                        "method-b-site": "ParameterParser.java:314",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:424.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-18-07",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 92,
        "inspection-start-time": "2022-01-05-18-07",
        "project": "commons-fileupload",
        "spec-id": "00227",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;[C)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parseToken([C)Ljava/lang/String;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00227.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:423",
                        "method-b-site": "ParameterParser.java:309",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:424.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-18-15",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 93,
        "inspection-start-time": "2022-01-05-18-52",
        "project": "commons-fileupload",
        "spec-id": "00230",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse([CC)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parseQuotedToken([C)Ljava/lang/String;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/u/00230.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ParameterParserTest#testContentTypeParsing",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "ParameterParser.java:260",
                        "method-b-site": "ParameterParser.java:314",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at ParameterParserTest.java:75.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-18-58",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 94,
        "inspection-start-time": "2022-01-05-18-58",
        "project": "commons-fileupload",
        "spec-id": "00233",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.parse([CIIC)Ljava/util/Map;",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parseQuotedToken([C)Ljava/lang/String;",
        "method-a-return-type": "java.util.Map",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/u/00233.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ParameterParserTest#testContentTypeParsing",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "ParameterParser.java:277",
                        "method-b-site": "ParameterParser.java:314",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at ParameterParserTest.java:75.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "as evident from snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-19-01",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 95,
        "inspection-start-time": "2022-01-06-10-43",
        "project": "commons-fileupload",
        "spec-id": "00245",
        "method-a": "org.apache.commons.fileupload2.RequestContext.getContentLength()I",
        "method-b": "org.apache.commons.fileupload2.UploadContext.contentLength()J",
        "method-a-return-type": "int",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": true,
        "test-classes-mine-count": 4,
        "test-methods-mine-count": 13,
        "code-snippets-file": "snippets/u/00245.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec)."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "?",
        "notes": "The used implementation of method-a retrieves the content length from ServletRequestContext.request, and method-b returns either the header part of ServletRequestContext.request, or the content length from the same field variable. CONNECTION_DOES_NOT_NECESSITATE_ORDERING here because both methods access the same field variable. DYNAMIC_DISPATCH: method-a is deprecated, and the caller of method-a calls method-b in order to replace the deprecated value in matching versions. So, there's no precondition-postcondition relationship between method-a and method-b.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-10-55",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 96,
        "inspection-start-time": "2022-01-06-10-56",
        "project": "commons-fileupload",
        "spec-id": "00246",
        "method-a": "org.apache.commons.fileupload2.RequestContext.getContentType()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.RequestContext.getCharacterEncoding()Ljava/lang/String;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 2,
        "test-methods-mine-count": 12,
        "code-snippets-file": "snippets/u/00246.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:954",
                        "method-b-site": "FileUploadBase.java:998",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACEMENT_TRIGGERS_CHECK_THAT_PREVENTS_B: Replaced with \"\" (the empty string), which was caught in the subsequent conditional and resulted in an exception.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "UNRELATED_STATELESS_METHODS or UNRELATED_STATEFUL_METHODS depending on the class of ServletRequestContext.request - method-a calls HttpServletRequest.getContentType() on ServletRequestContext.request, and method-b calls HttpServletRequest.getCharacterEncoding() on ServletRequestContext.request.",
        "notes": "UNRELATED_STATELESS_METHODS or UNRELATED_STATEFUL_METHODS depending on the class of ServletRequestContext.request - method-a calls HttpServletRequest.getContentType() on ServletRequestContext.request, and method-b calls HttpServletRequest.getCharacterEncoding() on ServletRequestContext.request.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-11-14",
        "inspection-time-in-minutes": 18
    },
    {
        "iid": 97,
        "inspection-start-time": "2022-01-06-11-14",
        "project": "commons-fileupload",
        "spec-id": "00247",
        "method-a": "org.apache.commons.fileupload2.RequestContext.getContentType()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.RequestContext.getContentLength()I",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 13,
        "code-snippets-file": "snippets/u/00247.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:954",
                        "method-b-site": "FileUploadBase.java:964",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACEMENT_TRIGGERS_CHECK_THAT_PREVENTS_B: Replaced with \"\" (the empty string), which was caught in the subsequent conditional and resulted in an exception.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "INSPECTION_TODO",
        "notes": "UNRELATED_STATELESS_METHODS or UNRELATED_STATEFUL_METHODS depending on the class of ServletRequestContext.request - method-a calls HttpServletRequest.getContentType() on ServletRequestContext.request, and method-b calls HttpServletRequest.getContentLength() on ServletRequestContext.request.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-11-18",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 98,
        "inspection-start-time": "2021-01-06-11-19",
        "project": "commons-fileupload",
        "spec-id": "00248",
        "method-a": "org.apache.commons.fileupload2.RequestContext.getContentType()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.RequestContext.getInputStream()Ljava/io/InputStream;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "java.io.InputStream",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 2,
        "test-methods-mine-count": 12,
        "code-snippets-file": "snippets/u/00248.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:954",
                        "method-b-site": "FileUploadBase.java:993",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACEMENT_TRIGGERS_CHECK_THAT_PREVENTS_B: Replaced with \"\" (the empty string), which was caught in the subsequent conditional and resulted in an exception.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "INSPECTION_TODO",
        "notes": "UNRELATED_STATELESS_METHODS or UNRELATED_STATEFUL_METHODS depending on the class of ServletRequestContext.request - method-a calls HttpServletRequest.getContentType() on ServletRequestContext.request, and method-b calls HttpServletRequest.getInputStream() on ServletRequestContext.request.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-11-26",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 99,
        "inspection-start-time": "2022-01-06-11-26",
        "project": "commons-fileupload",
        "spec-id": "00249",
        "method-a": "org.apache.commons.fileupload2.RequestContext.getContentType()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.UploadContext.contentLength()J",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 13,
        "code-snippets-file": "snippets/u/00249.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:954",
                        "method-b-site": "FileUploadBase.java:993",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACEMENT_TRIGGERS_CHECK_THAT_PREVENTS_B: Replaced with \"\" (the empty string), which was caught in the subsequent conditional and resulted in an exception.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "INSPECTION_TODO",
        "notes": "ONE_STATELESS_METHOD or UNRELATED_STATEFUL_METHODS depending on the class of ServletRequestContext.request - method-a calls HttpServletRequest.getContentType() on ServletRequestContext.request, and method-b calls HttpServletRequest.getHeader() and HttpServletRequest.getContentLength() on ServletRequestContext.request. DYNAMIC_DISPATCH",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-01-06-11-33",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 100,
        "inspection-start-time": "2022-01-06-12-01",
        "project": "commons-fileupload",
        "spec-id": "00251",
        "method-a": "org.apache.commons.fileupload2.UploadContext.contentLength()J",
        "method-b": "org.apache.commons.fileupload2.RequestContext.getCharacterEncoding()Ljava/lang/String;",
        "method-a-return-type": "long",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 12,
        "code-snippets-file": "snippets/u/00251.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec)."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "INSPECTION_TODO",
        "notes": "ONE_STATELESS_METHOD or UNRELATED_STATEFUL_METHODS depending on the class of ServletRequestContext.request - method-a calls HttpServletRequest.getHeader() and HttpServletRequest.getContentLength() on ServletRequestContext.request to return the size of the content of the request, and method-b calls HttpServletRequest.getCharacterEncoding() on ServletRequestContext.request.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-12-08",
        "inspection-time-in-minutes": 7
    },
    {
        "iid": 101,
        "inspection-start-time": "2022-01-06-12-09",
        "project": "commons-fileupload",
        "spec-id": "00252",
        "method-a": "org.apache.commons.fileupload2.UploadContext.contentLength()J",
        "method-b": "org.apache.commons.fileupload2.RequestContext.getInputStream()Ljava/io/InputStream;",
        "method-a-return-type": "long",
        "method-b-return-type": "java.io.InputStream",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 12,
        "code-snippets-file": "snippets/u/00252.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec)."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "INSPECTION_TODO",
        "notes": "ONE_STATELESS_METHOD or UNRELATED_STATEFUL_METHODS depending on the class of ServletRequestContext.request - method-a calls HttpServletRequest.getHeader() and HttpServletRequest.getContentLength() on ServletRequestContext.request to return the size of the content of the request, and method-b calls HttpServletRequest.getInputStream() on ServletRequestContext.request.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-12-13",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 102,
        "inspection-start-time": "2022-01-06-15-31",
        "project": "commons-fileupload",
        "spec-id": "00265",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.getSize()J",
        "method-b": "org.apache.commons.fileupload2.FileItem.delete()V",
        "method-a-return-type": "long",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00265.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec)."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "a-until-b",
        "validating-test-file": "manual experimentation (as documented in snippet) - calling method-a before method-b will result in 17, while calling method-a after method-b will result in 0 shows the connection between method-a and method-b. REVISIT",
        "notes": "method-a accesses the field variables DiskFileItem.size, DiskFileItem.cachedContent, and DiskFileItem.dfos in order to return the size of the file. method-b modifies the field variable DiskFileItem.cachedContent, and deletes the File associated with DiskFileItem.dfos. This seems like a case of CONNECTION_DOES_NOT_NECESSITATE_ORDERING, since both methods are public methods that can be called at any time. The return value of method-a will change based on whether method-b is called before or not. DSI would most likely declare this as a spurious spec? but we'd need to debug the ASM error to figure that out.",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-01-06-15-41",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 103,
        "inspection-start-time": "2022-01-06-15-42",
        "project": "commons-fileupload",
        "spec-id": "00266",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.getSize()J",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getStoreLocation()Ljava/io/File;",
        "method-a-return-type": "long",
        "method-b-return-type": "java.io.File",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00266.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR (checked for all tests that mined the spec)."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "manual experimentation (as documented in snippet)",
        "notes": "method-a accesses the field variables DiskFileItem.size, DiskFileItem.cachedContent, and DiskFileItem.dfos in order to return the size of the file. method-b returns either null or the File object associated with DiskFileItem.dfos. This is a case of CONNECTION_DOES_NOT_NECESSITATE_ORDERING, since both methods access DiskFileItem.cachedContent and DiskFileItem.dfos, and are also public methods that can be called anytime.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-15-45",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 104,
        "inspection-start-time": "2022-01-07-11-31",
        "project": "commons-fileupload",
        "spec-id": "00278",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.getTempFile()Ljava/io/File;",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getSize()J",
        "method-a-return-type": "java.io.File",
        "method-b-return-type": "long",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00278.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "",
                "notes": "ASM_ERROR."
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "observation of methods from the snippet",
        "notes": "method-a accesses and potentially modifies the field variables DiskFileItem.tempFile, DiskFileItem.tempDir, and returns the field variable DiskFileItem.tempFile. The return value of method-a is used by the caller to construct a DeferredFileOutputStream object to set the field variable DiskFileItem.dfos to. method-b accesses the field variables DiskFileItem.size, DiskFileItem.cachedContent, DiskFileItem.dfos to return the size of the file. While one cannot manually call method-a after method-b from the test because method-a is a protected method and method-b is called directly from the test, and one cannot manually call method-b before method-a without causing a NullPointerException (because the caller of method-a is a precondition for method-b), it is clear that the two methods themselves have no relation to each other - UNRELATED_STATEFUL_METHODS.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-11-49",
        "inspection-time-in-minutes": 18
    },
    {
        "iid": 105,
        "inspection-start-time": "2022-01-07-12-55",
        "project": "commons-fileupload",
        "spec-id": "00281",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.getTempFile()Ljava/io/File;",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.write(Ljava/io/File;)V",
        "method-a-return-type": "java.io.File",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00281.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItem.java:509",
                        "method-b-site": "DiskFileUploadTest.java:95",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at FileUploadBase.java:347",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "REVISIT - One can theoretically safely call method-a after method-b (difficult to do so manually because method-a is a protected method).",
        "notes": "method-a accesses and potentially modifies the field variables DiskFileItem.tempFile, DiskFileItem.tempDir, and returns the field variable DiskFileItem.tempFile. The return value of method-a is used by the caller to construct a DeferredFileOutputStream object to set the field variable DiskFileItem.dfos to. method-b accesses the field variables DiskFileItem.cachedContent, DiskFileItem.dfos, and writes the argument File to disk either via an OutputStream or via moving the file. Since method-a by itself does not access/affect any field variables that method-b deals with, this is a UNRELATED_STATEFUL_METHODS case. TRUE_SPEC_WITH_CALLER: the caller of method-a (getOutputStream()) has a precondition relationship with method-b.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-13-07",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 106,
        "inspection-start-time": "2022-01-07-13-47",
        "project": "commons-fileupload",
        "spec-id": "00286",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.getSize()J",
        "method-a-return-type": "void",
        "method-b-return-type": "long",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/u/00286.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "method-a returns void.",
                "notes": "ASM_ERROR. (checked that ASM error happened for all tests that mined this spec)"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "Most likely org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold, if the ASM error didn't happen",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. The only implementation of method-b accesses the field variables DiskFileItem.size, DiskFileItem.cachedContent, and DiskFileItem.dfos in order to retrieve the size of the file. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a. WEAK_ORACLE",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-14-00",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 107,
        "inspection-start-time": "2022-01-07-15-25",
        "project": "commons-fileupload",
        "spec-id": "00289",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getSize()J",
        "method-a-return-type": "void",
        "method-b-return-type": "long",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00289.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testAboveThreshold",
                "stage": "sanity-check-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "?",
                        "method-b-site": "?",
                        "invocation-count": 0
                    }
                ],
                "perturbation-count": 0,
                "comment-on-return-values": "method-a returns void.",
                "notes": "ASM_ERROR. (checked that ASM error happened for all tests that mined this spec)"
            }
        ],
        "verdict": "spurious-spec",
        "spec-type": "NA",
        "validating-test-file": "Most likely org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold, if the ASM error didn't happen",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. method-b accesses the field variables DiskFileItem.size, DiskFileItem.cachedContent, and DiskFileItem.dfos in order to retrieve the size of the file. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a. (Not completely sure about where method-b is being called because of the ASM error.)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-15-28",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 108,
        "inspection-start-time": "2022-01-07-15-49",
        "project": "commons-fileupload",
        "spec-id": "00293",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.write(Ljava/io/File;)V",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getStoreLocation()Ljava/io/File;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.io.File",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00293.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-0-failure",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:95",
                        "method-b-site": "DiskFileItem.java:396",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "Test passed even though the call to method-b (and the delayed call to method-a) never happened."
            }
        ],
        "verdict": "no-break-pass (direct)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-15-54",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 109,
        "inspection-start-time": "2022-01-07-18-51",
        "project": "commons-fileupload",
        "spec-id": "00295",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.getItemIterator(Ljavax/servlet/http/HttpServletRequest;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00295.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:257",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:258.",
                "notes": ""
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-18-57",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 110,
        "inspection-start-time": "2022-01-07-18-58",
        "project": "commons-fileupload",
        "spec-id": "00296",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00296.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-07",
        "inspection-time-in-minutes": 9
    },
    {
        "iid": 111,
        "inspection-start-time": "2022-01-07-19-07",
        "project": "commons-fileupload",
        "spec-id": "00297",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00297.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-12",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 112,
        "inspection-start-time": "2022-01-07-19-13",
        "project": "commons-fileupload",
        "spec-id": "00298",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00298.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-15",
        "inspection-time-in-minutes": 2
    },
    {
        "iid": 113,
        "inspection-start-time": "2022-01-07-19-15",
        "project": "commons-fileupload",
        "spec-id": "00299",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00299.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-20",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 114,
        "inspection-start-time": "2022-01-07-19-20",
        "project": "commons-fileupload",
        "spec-id": "00300",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00300.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-24",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 115,
        "inspection-start-time": "2022-01-07-19-24",
        "project": "commons-fileupload",
        "spec-id": "00301",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00301.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-27",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 116,
        "inspection-start-time": "2022-01-07-19-27",
        "project": "commons-fileupload",
        "spec-id": "00302",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00302.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-29",
        "inspection-time-in-minutes": 2
    },
    {
        "iid": 117,
        "inspection-start-time": "2022-01-07-19-30",
        "project": "commons-fileupload",
        "spec-id": "00303",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00303.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-33",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 118,
        "inspection-start-time": "2022-01-07-19-33",
        "project": "commons-fileupload",
        "spec-id": "00304",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00304.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-36",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 119,
        "inspection-start-time": "2022-01-07-19-46",
        "project": "commons-fileupload",
        "spec-id": "00306",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00306.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-51",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 120,
        "inspection-start-time": "2022-01-07-19-51",
        "project": "commons-fileupload",
        "spec-id": "00307",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00307.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself. "
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-54",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 121,
        "inspection-start-time": "2022-01-07-19-55",
        "project": "commons-fileupload",
        "spec-id": "00308",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00308.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-19-57",
        "inspection-time-in-minutes": 2
    },
    {
        "iid": 122,
        "inspection-start-time": "2022-01-07-20-14",
        "project": "commons-fileupload",
        "spec-id": "00309",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/u/00309.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-20-18",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 123,
        "inspection-start-time": "2022-01-07-20-20",
        "project": "commons-fileupload",
        "spec-id": "00310",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00310.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-20-28",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 124,
        "inspection-start-time": "2022-01-07-20-28",
        "project": "commons-fileupload",
        "spec-id": "00311",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00311.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-20-34",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 125,
        "inspection-start-time": "2022-01-07-20-34",
        "project": "commons-fileupload",
        "spec-id": "00312",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/u/00312.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-20-37",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 126,
        "inspection-start-time": "2022-01-07-20-37",
        "project": "commons-fileupload",
        "spec-id": "00313",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00313.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-20-41",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 127,
        "inspection-start-time": "2022-01-07-20-41",
        "project": "commons-fileupload",
        "spec-id": "00314",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "java.util.List",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/u/00314.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-0-failure",
                "exception-or-assertion": "exception",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:111",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:119",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:128",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 3,
                "comment-on-return-values": "NULL_REPLACEMENT_CAUSED_NULLPOINTEREXCEPTION. NullPointerException at SizesTest.java:112.",
                "notes": "While there are 3 perturbations, only one perturbation was actually performed because a NullPointerException occurred right after the first perturbation. Technically EXPECTED_EXCEPTION, but a NullPointerException was thrown before the control flow got to the expected exception itself."
            }
        ],
        "verdict": "no-break-pass (indirect)",
        "spec-type": "precondition",
        "validating-test-file": "snippet",
        "notes": "",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-20-46",
        "inspection-time-in-minutes": 5
    }
]
