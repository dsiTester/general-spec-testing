[
    {
        "iid": 1,
        "inspection-start-time": "2021-12-02-15-06",
        "project": "commons-fileupload",
        "spec-id": "00004",
        "method-a": "org.apache.commons.fileupload2.DefaultFileItemFactory.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.DefaultFileItemFactory.getRepository()Ljava/io/File;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.io.File",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00004.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [ { "method-a-site": "DiskFileUpload.java:138", "method-b-site": "DefaultFileItemFactory.java:102", "invocation-count": 1 } ],
                "comment-on-return-values": "method-a returns void",
                "perturbation-count": 1,
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-likely-valid-spec": true,
        "is-true-spec": false,
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "manually-written-validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile, with line `myUpload.setSizeThreshold(0);` commented out.",
        "spec-type": "NA",
        "notes": "Weak Oracle - the test does not check for the changed state by delaying a (or calling a with any other value). org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile has been deleted as of commit 0cef2ba. ONE_STATELESS_METHOD: method-b is a 1-line getter to the field variable DiskFileItemFactory.repository.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-02-15-46",
        "inspection-time-in-minutes": 40
    },
    {
        "iid": 2,
        "inspection-start-time": "2021-12-10-16-22",
        "project": "commons-fileupload",
        "spec-id": "00005",
        "method-a": "org.apache.commons.fileupload2.DefaultFileItemFactory.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.DefaultFileItemFactory.getSizeThreshold()I",
        "method-a-return-type": "void",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00005.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUpload.java:138",
                        "method-b-site": "DefaultFileItemFactory.java:102",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result, and so does replacing method-b with various int values (0, negative, positive). In this test, method-a sets the sizeThreshold to 0.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "precondition",
        "validating-test-file": "We would need to have a stronger assertion that checks whether setSizeThreshold() was called?",
        "notes": "The verdict here was made with consideration that sizeThreshold can be set via the constructor (refer to code snippet). However, it wouldn't **Really** make sense to call getSizeThreshold() before you call setSizeThreshold(), since the latter changes the state that getSizeThreshold() deals with. Additionally, it's evident that the oracle here is weak, because the changed state via setSizeThreshold() had no bearing on the test result. ONE_STATELESS_METHOD: method-b is a 1-line naive getter to the field variable DefaultFileItemFactory.sizeThreshold.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-16-50",
        "inspection-time-in-minutes": 38
    },
    {
        "iid": 3,
        "inspection-start-time": "2021-12-10-16-57",
        "project": "commons-fileupload",
        "spec-id": "00006",
        "method-a": "org.apache.commons.fileupload2.DefaultFileItemFactory.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileItemFactory.createItem(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/fileupload2/FileItem;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItem",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00006.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUpload.java:138",
                        "method-b-site": "FileUploadBase.java:343",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The oracle is weak because there is clearly changed state (sizeThreshold changes when method-a is called), but it is not caught. However, this is not a true spec because the size threshold can also be obtained without setting it (refer to spec-id 00005 for more explanation).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-10-17-10",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 4,
        "inspection-start-time": "2021-12-11-11-05",
        "project": "commons-fileupload",
        "spec-id": "00017",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.DiskFileUpload.parseRequest(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/List;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.util.List",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00017.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "DiskFileUploadTest.java:90",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The oracle is weak because there is clearly changed state (sizeThreshold changes when method-a is called), but it is not caught. However, this is not a true spec because the size threshold can also be obtained without setting it (Refer to 00006 - same method-a, and method-b from this spec is the immediate caller of method-b from 00006.)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-11-16",
        "inspection-time-in-minutes": 11
    },
    {
        "iid": 5,
        "inspection-start-time": "2021-12-11-11-16",
        "project": "commons-fileupload",
        "spec-id": "00018",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "void",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00018.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The oracle can be strengthened to check that calling method-a made a change to the execution - otherwise there is no use for calling method-a. There is no direct relationship between method-a and method-b (method-b does not use getSizeThreshold()/access sizeThreshold).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-11-31",
        "inspection-time-in-minutes": 15
    },
    {
        "iid": 6,
        "inspection-start-time": "2021-12-11-11-34",
        "project": "commons-fileupload",
        "spec-id": "00019",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00019.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The oracle can be strengthened to check that calling method-a made a change to the execution - otherwise there is no use for calling method-a. There is no direct relationship between method-a and method-b (method-b does not use getSizeThreshold()/access sizeThreshold). NOTE: org.apache.commons.fileupload2.DiskFileUploadTest mined the spec as well, but the invocation sites are identical as org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-11-51",
        "inspection-time-in-minutes": 17
    },
    {
        "iid": 7,
        "inspection-start-time": "2021-12-11-12-02",
        "project": "commons-fileupload",
        "spec-id": "00020",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00020.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The method-b for this spec is the immediate caller of that of 00019. 00019 comment: The oracle can be strengthened to check that calling method-a made a change to the execution - otherwise there is no use for calling method-a. There is no direct relationship between method-a and method-b (method-b does not use getSizeThreshold()/access sizeThreshold).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-12-10",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 8,
        "inspection-start-time": "2021-12-11-12-11",
        "project": "commons-fileupload",
        "spec-id": "00021",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00021.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Somewhat similar to 00017 - the method-b here is a method that method-b from 00017 calls. However, there is no relationship between method-a and method-b. 00017 comment: The oracle is weak because there is clearly changed state (sizeThreshold changes when method-a is called), but it is not caught. However, this is not a true spec because the size threshold can also be obtained without setting it. ONE_STATELESS_METHOD: method-b is a 1-line naive getter to the field variable DiskFileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-12-20",
        "inspection-time-in-minutes": 9
    },
    {
        "iid": 9,
        "inspection-start-time": "2021-12-11-13-10",
        "project": "commons-fileupload",
        "spec-id": "00022",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00022.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Similar to 00018.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-13-15",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 10,
        "inspection-start-time": "2021-12-11-13-15",
        "project": "commons-fileupload",
        "spec-id": "00023",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00023.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The method-b of this spec is the immediate caller of method-b from 00022. The oracle can be strengthened to check that calling method-a made a change to the execution - otherwise there is no use for calling method-a. There is no direct relationship between method-a and method-b (method-b does not use getSizeThreshold()/access sizeThreshold).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-13-19",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 11,
        "inspection-start-time": "2021-12-11-13-20",
        "project": "commons-fileupload",
        "spec-id": "00024",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00024.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:333",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The method-a here is same as 00018, and the method-b here is the method that calls method-b-s from 00018-00023. That being said, nowhere in method-b was sizeThreshold used... If the value of sizeThreshold was actually influential here, then all of 00018-00023 could have been a bigger spec. 00018 comment: The oracle can be strengthened to check that calling method-a made a change to the execution - otherwise there is no use for calling method-a. There is no direct relationship between method-a and method-b (method-b does not use getSizeThreshold()/access sizeThreshold).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-13-32",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 12,
        "inspection-start-time": "2021-12-11-13-32",
        "project": "commons-fileupload",
        "spec-id": "00025",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00025.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Similar case as 00019.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-13-38",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 13,
        "inspection-start-time": "2021-12-11-13-38",
        "project": "commons-fileupload",
        "spec-id": "00026",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00026.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Similar to 00025 - the method-a-s are the same, and the method-b from this spec is immediately called by method-b of 00025.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-13-51",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 14,
        "inspection-start-time": "2021-12-11-13-52",
        "project": "commons-fileupload",
        "spec-id": "00027",
        "method-a": "org.apache.commons.fileupload2.DiskFileUpload.setSizeThreshold(I)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.parseRequest(Lorg/apache/commons/fileupload2/RequestContext;)Ljava/util/List;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.util.List",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00027.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileUploadTest.java:78",
                        "method-b-site": "FileUploadBase.java:287",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Not calling method-a has no bearing on the result (method-a returns void as well). Replacing the argument to method-a (method-a sets sizeThreshold to 0 in the original test) to MAX_INT and MIN_INT did not change the outcome of the test as well. method-b returns a FileItem, but no oracle checks for its sizeThreshold value (as evident from the fact that the test does not fail after DSI manipulates the program.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "Refer to 00017 - this spec's method-b is immediately called after that of 00017. 00017 comment: The oracle is weak because there is clearly changed state (sizeThreshold changes when method-a is called), but it is not caught. However, this is not a true spec because the size threshold can also be obtained without setting it.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-11-14-02",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 15,
        "inspection-start-time": "2021-12-18-12-56",
        "project": "commons-fileupload",
        "spec-id": "00087",
        "method-a": "org.apache.commons.fileupload2.FileItem.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.get()[B",
        "method-a-return-type": "void",
        "method-b-return-type": "byte[]",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00087.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:355",
                        "method-b-site": "SizesTest.java:114",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "FileUploadBase.java:355",
                        "method-b-site": "SizesTest.java:122",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 2,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit - DSIValidationTest#testDSI00087 with FileUploadBase.java:355 commented out should \"replicate\" the delayed call to method-a after method-b is called.",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.headers. While the test doesn't test the changed value of FileItem.headers, the field headers is not used anywhere in method-b or its callees. Hence, this is a spurious-spec. Moreover, DSIValidationTest#testDSI00087 displays a manual replication of the DSI experiment, showing that there is no relation between method-a and method-b.",
        "findings": "This spec is the first in a series that has org.apache.commons.fileupload2.FileItem.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V as method-a. After commenting out the location where this method-a is called and running all tests, none of the tests failed - meaning that none of the tests in commons-fileupload checked for the value affected by method-a. The getter of the field headers (which is set via the call to method-a) is only called in order to pass an argument to setHEaders (FileUploadBase.java:354). The data that's being set via calling setHeaders contains some metainfo? about the file so it may be important. The problem seems to be a lack of revealability (in RIPR).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-13-13",
        "inspection-time-in-minutes": 26
    },
    {
        "iid": 16,
        "inspection-start-time": "2021-12-18-13-13",
        "project": "commons-fileupload",
        "spec-id": "00088",
        "method-a": "org.apache.commons.fileupload2.FileItem.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.getFieldName()Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/ls/00088.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:355",
                        "method-b-site": "SizesTest.java:83",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.headers. While the test doesn't test the changed value of FileItem.headers, the field headers is not used anywhere in method-b (especially since method-b is a naive getter). Hence, this is a spurious-spec. ONE_STATELESS_METHOD: the implementation of method-b is a 1-line naive getter to the field variable DiskFileItem.fieldName.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-13-25",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 17,
        "inspection-start-time": "2021-12-18-14-02",
        "project": "commons-fileupload",
        "spec-id": "00089",
        "method-a": "org.apache.commons.fileupload2.FileItem.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getStoreLocation()Ljava/io/File;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.io.File",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00089.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:355",
                        "method-b-site": "DiskFileItem.java:396",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.headers. While the test doesn't test the changed value of FileItem.headers, the field headers is not used anywhere in method-b. Hence, this is a spurious-spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-14-16",
        "inspection-time-in-minutes": 14
    },
    {
        "iid": 18,
        "inspection-start-time": "2021-12-18-14-17",
        "project": "commons-fileupload",
        "spec-id": "00090",
        "method-a": "org.apache.commons.fileupload2.FileItem.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.isInMemory()Z",
        "method-a-return-type": "void",
        "method-b-return-type": "boolean",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/ls/00090.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:355",
                        "method-b-site": "DiskFileItem.java:301",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.headers. While the test doesn't test the changed value of FileItem.headers, the field headers is not used anywhere in method-b. Hence, this is a spurious-spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-14-30",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 19,
        "inspection-start-time": "2021-12-18-14-40",
        "project": "commons-fileupload",
        "spec-id": "00091",
        "method-a": "org.apache.commons.fileupload2.FileItem.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.write(Ljava/io/File;)V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00091.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:355",
                        "method-b-site": "DiskFileUploadTest.java:95",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile - change the call to createTempFile() on DiskFileUploadTest.java:94 to a file that one can observe after running the test. Between when method-a is invoked before method-b, and when method-a is not invoked, there is no difference.",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.headers. method-b writes some output to its File argument. Since method-b does not use or modify DiskFileItem.header, and DiskFileItem.header does not affect method-b's argument, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-15-03",
        "inspection-time-in-minutes": 23
    },
    {
        "iid": 20,
        "inspection-start-time": "2021-12-18-18-54",
        "project": "commons-fileupload",
        "spec-id": "00095",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.getContentType()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getHeaders()Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00095.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:343",
                        "method-b-site": "FileUploadBase.java:354",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI most likely replaces the return type of method-a with the declared variable content from the test (DiskFileUploadTest.java:90).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "UNRELATED_STATELESS_METHODS. The test is weak because it does not account for the changed value of method-a. However, the snippets show that both method-a and method-b are naive getters; hence this spec is spurious.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-19-08",
        "inspection-time-in-minutes": 14
    },
    {
        "iid": 21,
        "inspection-start-time": "2021-12-18-19-08",
        "project": "commons-fileupload",
        "spec-id": "00096",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.getContentType()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.isFormField()Z",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "boolean",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 2,
        "test-methods-mine-count": 8,
        "code-snippets-file": "snippets/ls/00096.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:343",
                        "method-b-site": "FileUploadBase.java:344",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI most likely replaces the return type of method-a with the declared variable content from the test (DiskFileUploadTest.java:90).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The test is weak because it does not account for the changed value of method-a. However, the snippets show that both method-a and method-b are naive getters; hence this spec is spurious. UNRELATED_STATELESS_METHODS - refer to snippet.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-19-11",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 22,
        "inspection-start-time": "2021-12-18-19-13",
        "project": "commons-fileupload",
        "spec-id": "00097",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.getContentType()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.openStream()Ljava/io/InputStream;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "java.io.InputStream",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 2,
        "test-methods-mine-count": 8,
        "code-snippets-file": "snippets/ls/00097.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:343",
                        "method-b-site": "FileUploadBase.java:347",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI most likely replaces the return type of method-a with the declared variable content from the test (DiskFileUploadTest.java:90).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "The test is weak because it does not account for the changed value of method-a. However, the snippets show that method-a is a naive getter, and while method-b is more sophisticated as a getter, none of the methods that it calls use/are affected by the field variable modified by method-a. Hence, this is a spurious spec. ONE_STATELESS_METHOD: the implementation of method-a is a 1-line naive getter to the field variable FileItemStreamImpl.contentType.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-19-23",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 23,
        "inspection-start-time": "2021-12-18-19-24",
        "project": "commons-fileupload",
        "spec-id": "00098",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.getContentType()Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.close()V",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "void",
        "same-class": "no",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00098.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:343",
                        "method-b-site": "FileUploadBase.java:1032",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI most likely replaces the return type of method-a with the declared variable content from the test (DiskFileUploadTest.java:90).",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "",
        "notes": "The test is weak because it does not account for the changed value of method-a. However, the snippets show that method-a is a naive getter, and while method-b changes state (closes an InputStream), the method-a is not necessarily connected to the InputStream (given that the outputted file doesn't differ when method-a's return value is replaced with gibberish (manually verified), I don't think this would be a spec.  ONE_STATELESS_METHOD: the implementation of method-a is a 1-line naive getter to the field variable FileItemStreamImpl.contentType.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-18-19-38",
        "inspection-time-in-minutes": 14
    },
    {
        "iid": 24,
        "inspection-start-time": "2021-12-21-21-13",
        "project": "commons-fileupload",
        "spec-id": "00105",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.getHeaders()Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.close()V",
        "method-a-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 2,
        "test-methods-mine-count": 8,
        "code-snippets-file": "snippets/ls/00105.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:343",
                        "method-b-site": "FileUploadBase.java:1032",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACEMENT_VALUE_UNCLEAR: Not quite sure what the replacement value of method-a was, but the oracle clearly does not check it. Hence, the test passes even when method-a is delayed.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "DYNAMIC_DISPATCH. method-a is actually not declared in FileItemStream.java, but since the object being acted upon is FileItemStream, method-a in the spec is recorded as FileItemStream.getHeaders(). While method-b changes state by closing an InputStream, the field variable one can retrieve by calling method-a (headers) is not affected by this state change. ONE_STATELESS_METHOD: the implementation of method-a is a 1-line naive getter to the field variable FileItemStreamImpl.headers.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-21-21-22",
        "inspection-time-in-minutes": 9
    },
    {
        "iid": 25,
        "inspection-start-time": "2021-12-21-21-47",
        "project": "commons-fileupload",
        "spec-id": "00107",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.isFormField()Z",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getFieldName()Ljava/lang/String;",
        "method-a-return-type": "boolean",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00107.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:261",
                        "method-b-site": "SizesTest.java:262",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_EXPECTED_OUTPUT. Expected value was false, and the default value that DSI chooses for booleans is false.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength with lines 261 and 262 swapped",
        "notes": "UNRELATED_STATELESS_METHODS. Both method-a and method-b are 1-line getters.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-21-21-57",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 26,
        "inspection-start-time": "2021-12-21-21-58",
        "project": "commons-fileupload",
        "spec-id": "00108",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.isFormField()Z",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getHeaders()Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "boolean",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00108.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:344",
                        "method-b-site": "FileUploadBase.java:354",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_CORRECT_VALUE_NONASSERTION + DEFAULT_VALUE_SAME_AS_RETURN. A call to method-a at the point in the execution would have returned false (manually tested), and DSI's default replacement value for booleans is false. Hence, there was no difference in the code (because method-a is a stateless 1-line getter)",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile and replace the call to method-a on FileUploadBase.java:344 with false, and call call method-a immediately after FileUploadBase.java:354",
        "notes": "UNRELATED_STATELESS_METHODS. The two methods themselves are 1-line getters, so they are not related.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-21-22-12",
        "inspection-time-in-minutes": 14
    },
    {
        "iid": 27,
        "inspection-start-time": "2021-12-21-22-13",
        "project": "commons-fileupload",
        "spec-id": "00109",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.isFormField()Z",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getName()Ljava/lang/String;",
        "method-a-return-type": "boolean",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00109.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:261",
                        "method-b-site": "SizesTest.java:263",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_EXPECTED_OUTPUT. Expected value was false, and the default value that DSI chooses for booleans is false.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength with line 261 of SizesTest put after line 263",
        "notes": "ONE_STATELESS_METHOD: the only implementation of method-a is a 1-line naive getter to the field variable FileItemStream.formField. The only implementation of method-b uses the field variable FileItemStream.name to either return a modified version or throw an InvalidFileNameException. Since method-b does not use and is not affected by the field variable FileItemStream.formField, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-21-22-23",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 28,
        "inspection-start-time": "2021-12-21-22-24",
        "project": "commons-fileupload",
        "spec-id": "00110",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.isFormField()Z",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.openStream()Ljava/io/InputStream;",
        "method-a-return-type": "boolean",
        "method-b-return-type": "java.io.InputStream",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 2,
        "test-methods-mine-count": 8,
        "code-snippets-file": "snippets/ls/00110.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:344",
                        "method-b-site": "FileUploadBase.java:347",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_CORRECT_VALUE_NONASSERTION/DEFAULT_VALUE_SAME_AS_RETURN. A call to method-a at the point in the execution would have returned false (manually tested), and DSI's default replacement value for booleans is false. Hence, there was no difference in the code (because method-a is a stateless 1-line getter)",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to how the spec is evaluated."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit and replace the call to method-a on FileUploadBase.java:344 with false, and call call method-a immediately after FileUploadBase.java:347",
        "notes": "While method-b does impact state and could throw an exception, method-a is a 1-line getter and its value is not related to the checks and operations that method-b does (ONE_STATELESS_METHOD).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-21-22-36",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 29,
        "inspection-start-time": "2021-12-21-22-36",
        "project": "commons-fileupload",
        "spec-id": "00111",
        "method-a": "org.apache.commons.fileupload2.FileItemStream.isFormField()Z",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.close()V",
        "method-a-return-type": "boolean",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 6,
        "code-snippets-file": "snippets/ls/00111.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFileUpload",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:344",
                        "method-b-site": "FileUploadBase.java:1032",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACE_RETURN_WITH_CORRECT_VALUE_NONASSERTION/DEFAULT_VALUE_SAME_AS_RETURN. A call to method-a at the point in the execution would have returned false (manually tested), and DSI's default replacement value for booleans is false. Hence, there was no difference in the code (because method-a is a stateless 1-line getter)",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFileUpload",
        "notes": "While method-b does impact state, method-a is a 1-line getter and its value is not related to the operations that method-b does (ONE_STATELESS_METHOD).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-21-22-49",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 30,
        "inspection-start-time": "2021-12-22-01-31",
        "project": "commons-fileupload",
        "spec-id": "00118",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getContentType()Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/ls/00118.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1073",
                        "method-b-site": "FileUploadBase.java:343",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "STATE_RESTORED? TODO: come back to this and run an experiment to check whether the state was actually restored or not (print statement right before the call to getHeaders() (FileUploadBase.java:354). Also EXPECTED_EXCEPTION, but that fact seems unrelated to how the spec was evaluated."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
        "notes": "STATE_RESTORED? method-a is a setter but sets a value that is unrelated to the value that method-b (a 1-line getter - ONE_STATELESS_METHOD), retrieves. More interestingly, this spec might contain some state restoration, even though the test is too weak to even check the values that are at play. Would be interesting to check whether the state was actually restored.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-01-54",
        "inspection-time-in-minutes": 23
    },
    {
        "iid": 31,
        "inspection-start-time": "2021-12-22-02-02",
        "project": "commons-fileupload",
        "spec-id": "00119",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getFieldName()Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/ls/00119.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1073",
                        "method-b-site": "FileUploadBase.java:343",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "STATE_RESTORED? TODO: come back to this and run an experiment to check whether the state was actually restored or not (print statement right before the call to getHeaders() (FileUploadBase.java:354). Also EXPECTED_EXCEPTION, but that fact seems unrelated to how the spec was evaluated."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
        "notes": "method-a is a setter but sets a value that is unrelated to the value that method-b (a 1-line getter - ONE_STATELESS_METHOD), retrieves. More interestingly, this spec might contain some state restoration, even though the test is too weak to even check the values that are at play. Would be interesting to check whether the state was actually restored.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-02-06",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 32,
        "inspection-start-time": "2021-12-22-02-06",
        "project": "commons-fileupload",
        "spec-id": "00120",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.getHeaders()Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/ls/00120.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1073",
                        "method-b-site": "FileUploadBase.java:354",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "true-spec",
        "is-oracle-weak": true,
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile with suggestions in snippet. They should show that not calling method-a before calling method-b would make the return value of method-b be null.",
        "notes": "Setter and Getter for the same field (headers - ONE_STATELESS_METHOD). However, the test does not check for this headers field at all, causing DSI to determine it to be an incorrect spec. Also, DYNAMIC_DISPATCH is causing interesting changes; as method-b is not declared in the interface (but the asm part says it's from the interface!) Manually checked that method-a is the only way that headers is set to a value.",
        "findings": "demote to sts?",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2021-12-22-02-19",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 33,
        "inspection-start-time": "2021-12-22-02-19",
        "project": "commons-fileupload",
        "spec-id": "00121",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.isFormField()Z",
        "method-a-return-type": "void",
        "method-b-return-type": "boolean",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/ls/00121.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1073",
                        "method-b-site": "FileUploadBase.java:344",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "STATE_RESTORED? TODO: come back to this and run an experiment to check whether the state was actually restored or not (print statement right before the call to getHeaders() (FileUploadBase.java:354). Also EXPECTED_EXCEPTION, but that fact seems unrelated to how the spec was evaluated."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
        "notes": "method-a is a setter but sets a value that is unrelated to the value that method-b (a 1-line getter - ONE_STATELESS_METHOD), retrieves. More interestingly, this spec might contain some state restoration, even though the test is too weak to even check the values that are at play. Would be interesting to check whether the state was actually restored.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-02-22",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 34,
        "inspection-start-time": "2021-12-22-12-28",
        "project": "commons-fileupload",
        "spec-id": "00122",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.FileItemStream.openStream()Ljava/io/InputStream;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.io.InputStream",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 9,
        "code-snippets-file": "snippets/ls/00122.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ProgressListenerTest#testProgressListener",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1073",
                        "method-b-site": "ProgressListenerTest.java:111",
                        "invocation-count": 1024
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.ProgressListenerTest#testProgressListener",
        "notes": "While method-a and method-b both impact state, they work on different values; technically a call to method-b can lead to an exception, but other than that calling method-b first would not impact how method-a executes. However, it is important to note that the test itself does not check for the value that method-a sets (headers), so it would be considered as a weak oracle case. Also, another case of DYNAMIC_DISPATCH causing the two methods to have different object types.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-12-49",
        "inspection-time-in-minutes": 21
    },
    {
        "iid": 35,
        "inspection-start-time": "2021-12-22-12-49",
        "project": "commons-fileupload",
        "spec-id": "00123",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.close()V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 2,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00123.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ProgressListenerTest#testProgressListener",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1073",
                        "method-b-site": "FileUploadBase.java:1032",
                        "invocation-count": 1024
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.ProgressListenerTest#testProgressListener",
        "notes": "Upon inspection of the snippet, one can see that while both methods impact state, the state that is being impacted in method-a is not related to that of method-b, and vice versa.  However, it is important to note that the test itself does not check for the value that method-a sets (headers), so it would be considered as a weak oracle case.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-12-59",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 36,
        "inspection-start-time": "2021-12-22-14-09",
        "project": "commons-fileupload",
        "spec-id": "00127",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.setFieldName(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase$FileSizeLimitExceededException.setFileName(Ljava/lang/String;)V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00127.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:795",
                        "method-b-site": "FileUploadBase.java:796",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a is void",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
        "notes": "STATE_RESTORED. method-b was called immediately after method-a, so the state was immediately restored. UNRELATED_PURE_SETTERS: Upon inspection of the snippets, it is clear that method-a and method-b are 1-line setters that don't impact each other.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-22-14-25",
        "inspection-time-in-minutes": 16
    },
    {
        "iid": 37,
        "inspection-start-time": "2021-12-23-14-24",
        "project": "commons-fileupload",
        "spec-id": "00147",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/ls/00147.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:461",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI most likely replaced the return-value of method-a with null, but there is no knowing because the test oracle was weak and didn't check the return value of method-a.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "ModifiedStreamingTest#testFILEUPLOAD135 in snippets, given the changes proposed in the snippets (via NOTES).",
        "notes": "UNRELATED_STATELESS_METHODS: Given that both methods are getters that don't influence each other (given snippet), the spec is spurious. A big problem with the weak oracle here though, is that in the execution of StreamingTest#testFILEUPLOAD135, the value affected by the return value of method-a (item.name()) is null, because the return value of method-a in the execution is null. Would checking that item.name() is null really strengthen the oracle?",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-14-56",
        "inspection-time-in-minutes": 22
    },
    {
        "iid": 38,
        "inspection-start-time": "2021-12-23-16-32",
        "project": "commons-fileupload",
        "spec-id": "00148",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileItemFactory()Lorg/apache/commons/fileupload2/FileItemFactory;",
        "method-a-return-type": "java.lang.String",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemFactory",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/ls/00148.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1069",
                        "method-b-site": "FileUploadBase.java:334",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "DSI most likely replaced the return-value of method-a with null, but there is no knowing because the test oracle was weak and didn't check the return value of method-a.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "ModifiedStreamingTest#testFILEUPLOAD135 in snippets, given the changes proposed in the snippets (via NOTES).",
        "notes": "method-a parses a particular value from its FileItemHeaders argument, and returns the \"filename\" field of the parsed value. ONE_STATELESS_METHOD: the used implementation of method-b is a 1-line getter to the field variable FileUpload.fileItemFactory. A big problem with the weak oracle here though, is that in the execution of StreamingTest#testFILEUPLOAD135, the value affected by the return value of method-a (item.name()) is null, because the return value of method-a in the execution is null. Would checking that item.name() is null really strengthen the oracle? (This method-a is the immediate caller of 00147's method-a, and it does not perform any operations besides calling 000147's method-a.).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2021-12-23-16-45",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 39,
        "inspection-start-time": "2022-01-03-19-36",
        "project": "commons-fileupload",
        "spec-id": "00187",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.setFileItemFactory(Lorg/apache/commons/fileupload2/FileItemFactory;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "void",
        "method-b-return-type": "byte[]",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00187.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:181",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
        "notes": "STATE_RESTORED. The JavaDoc comments for ServletFileUpload state that method-a does need to be called before attempting to parse requests, so there seems to be a relationship between FileUploadBase.parseRequest() and method-a. However, calling method-a after method-b (which is a part of the call to FileUploadBase.getItemIterator()) restores the state (setFileItemFactory being called) before it is actually necessary (FileUploadBase.java:334). Plus, there's no actual relationship between method-a and method-b themselves; thus, this is most likely a spurious spec. ONE_PURE_SETTER: the used implementation of method-a is a pure setter to the field variable FileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-20-09",
        "inspection-time-in-minutes": 33
    },
    {
        "iid": 40,
        "inspection-start-time": "2022-01-03-20-10",
        "project": "commons-fileupload",
        "spec-id": "00188",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.setFileItemFactory(Lorg/apache/commons/fileupload2/FileItemFactory;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00188.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:181",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
        "notes": "STATE_RESTORED. The JavaDoc comments for ServletFileUpload state that method-a does need to be called before attempting to parse requests, so there seems to be a relationship between FileUploadBase.parseRequest() and method-a. However, calling method-a after method-b (which is a part of the call to FileUploadBase.getItemIterator()) restores the state (setFileItemFactory being called) before it is actually necessary (FileUploadBase.java:334). Plus, there's no actual relationship between method-a and method-b itself; thus, this is most likely a spurious spec. ONE_PURE_SETTER: the used implementation of method-a is a pure setter to the field variable FileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-20-18",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 41,
        "inspection-start-time": "2022-01-03-20-18",
        "project": "commons-fileupload",
        "spec-id": "00189",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.setFileItemFactory(Lorg/apache/commons/fileupload2/FileItemFactory;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00189.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:181",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
        "notes": "STATE_RESTORED. The JavaDoc comments for ServletFileUpload state that method-a does need to be called before attempting to parse requests, so there seems to be a relationship between FileUploadBase.parseRequest() and method-a. However, calling method-a after method-b (which is a part of the call to FileUploadBase.getItemIterator()) restores the state (setFileItemFactory being called) before it is actually necessary (FileUploadBase.java:334). Plus, there's no actual relationship between method-a and method-b itself; thus, this is most likely a spurious spec. ONE_PURE_SETTER: the used implementation of method-a is a pure setter to the field variable FileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-20-22",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 42,
        "inspection-start-time": "2022-01-03-20-33",
        "project": "commons-fileupload",
        "spec-id": "00191",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.setFileItemFactory(Lorg/apache/commons/fileupload2/FileItemFactory;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00191.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:181",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
        "notes": "STATE_RESTORED. The JavaDoc comments for ServletFileUpload state that method-a does need to be called before attempting to parse requests, so there seems to be a relationship between FileUploadBase.parseRequest() and method-a. However, calling method-a after method-b (which is a part of the call to FileUploadBase.getItemIterator()) restores the state (setFileItemFactory being called) before it is actually necessary (FileUploadBase.java:334). Plus, there's no actual relationship between method-a and method-b itself; thus, this is most likely a spurious spec. ONE_PURE_SETTER: the used implementation of method-a is a pure setter to the field variable FileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-20-37",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 43,
        "inspection-start-time": "2022-01-03-20-37",
        "project": "commons-fileupload",
        "spec-id": "00192",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.setFileItemFactory(Lorg/apache/commons/fileupload2/FileItemFactory;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00192.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:181",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
        "notes": "STATE_RESTORED. The JavaDoc comments for ServletFileUpload state that method-a does need to be called before attempting to parse requests, so there seems to be a relationship between FileUploadBase.parseRequest() and method-a. However, calling method-a after method-b (which is a part of the call to FileUploadBase.getItemIterator()) restores the state (setFileItemFactory being called) before it is actually necessary (FileUploadBase.java:334). Plus, there's no actual relationship between method-a and method-b itself; thus, this is most likely a spurious spec. ONE_PURE_SETTER: the used implementation of method-a is a pure setter to the field variable FileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-20-40",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 44,
        "inspection-start-time": "2022-01-03-20-41",
        "project": "commons-fileupload",
        "spec-id": "00194",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.setFileItemFactory(Lorg/apache/commons/fileupload2/FileItemFactory;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00194.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:181",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
        "notes": "STATE_RESTORED. The JavaDoc comments for ServletFileUpload state that method-a does need to be called before attempting to parse requests, so there seems to be a relationship between FileUploadBase.parseRequest() and method-a. However, calling method-a after method-b (which is a part of the call to FileUploadBase.getItemIterator()) restores the state (setFileItemFactory being called) before it is actually necessary (FileUploadBase.java:334). Plus, there's no actual relationship between method-a and method-b itself; thus, this is most likely a spurious spec. ONE_PURE_SETTER: the used implementation of method-a is a pure setter to the field variable FileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-03-20-46",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 45,
        "inspection-start-time": "2022-01-04-11-31",
        "project": "commons-fileupload",
        "spec-id": "00195",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.setFileItemFactory(Lorg/apache/commons/fileupload2/FileItemFactory;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00195.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:181",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
        "notes": "STATE_RESTORED. The JavaDoc comments for ServletFileUpload state that method-a does need to be called before attempting to parse requests, so there seems to be a relationship between FileUploadBase.parseRequest() and method-a. However, calling method-a after method-b (which is a part of the call to FileUploadBase.getItemIterator()) restores the state (setFileItemFactory being called) before it is actually necessary (FileUploadBase.java:334). Plus, there's no actual relationship between method-a and method-b itself; thus, this is most likely a spurious spec. ONE_PURE_SETTER: the used implementation of method-a is a pure setter to the field variable FileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-11-34",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 46,
        "inspection-start-time": "2022-01-04-11-35",
        "project": "commons-fileupload",
        "spec-id": "00196",
        "method-a": "org.apache.commons.fileupload2.FileUploadBase.setFileItemFactory(Lorg/apache/commons/fileupload2/FileItemFactory;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.parseHeaderLine(Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;Ljava/lang/String;)V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00196.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "StreamingTest.java:181",
                        "method-b-site": "FileUploadBase.java:606",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFILEUPLOAD135",
        "notes": "STATE_RESTORED. The JavaDoc comments for ServletFileUpload state that method-a does need to be called before attempting to parse requests, so there seems to be a relationship between FileUploadBase.parseRequest() and method-a. However, calling method-a after method-b (which is a part of the call to FileUploadBase.getItemIterator()) restores the state (setFileItemFactory being called) before it is actually necessary (FileUploadBase.java:334). Plus, there's no actual relationship between method-a and method-b itself; thus, this is most likely a spurious spec. ONE_PURE_SETTER: the used implementation of method-a is a pure setter to the field variable FileUpload.fileItemFactory.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-11-37",
        "inspection-time-in-minutes": 2
    },
    {
        "iid": 47,
        "inspection-start-time": "2022-01-04-11-47",
        "project": "commons-fileupload",
        "spec-id": "00198",
        "method-a": "org.apache.commons.fileupload2.MockHttpServletRequest.setContentLength(J)V",
        "method-b": "org.apache.commons.fileupload2.MockHttpServletRequest.setReadLimit(I)V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": true,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00198.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:254",
                        "method-b-site": "SizesTest.java:255",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "Technically EXPECTED_EXCEPTION, but unrelated to this spec and the DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "UNRELATED_PURE_SETTERS: Two setters that set a different value from each other.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-11-57",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 48,
        "inspection-start-time": "2022-01-04-12-29",
        "project": "commons-fileupload",
        "spec-id": "00200",
        "method-a": "org.apache.commons.fileupload2.MultipartStream$ProgressNotifier.noteBytesRead(I)V",
        "method-b": "org.apache.commons.fileupload2.MultipartStream$ProgressNotifier.noteItem()V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00200.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "MultipartStream.java:1036",
                        "method-b-site": "FileUploadBase.java:1074",
                        "invocation-count": 3
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "Technically EXPECTED_EXCEPTION, but not related to DSI experiment. Difficult to find out the precise context at which method-a was called and commenting it out does not lead the test to fail."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimit",
        "notes": "Observing the snippets, it seems that both method-a and method-b notify a listener; however, the two methods are not dependent on each other.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-12-50",
        "inspection-time-in-minutes": 31
    },
    {
        "iid": 49,
        "inspection-start-time": "2022-01-04-15-34",
        "project": "commons-fileupload",
        "spec-id": "00208",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.setHeaderEncoding(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.findSeparator()I",
        "method-a-return-type": "void",
        "method-b-return-type": "int",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00208.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1015",
                        "method-b-site": "MultipartStream.java:848",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "EXPECTED_EXCEPTION, and the exception gets thrown after method-b (and the delayed method-a) are called, commenting out method-a does not cause the test to fail."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testIOException",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable MultipartStream.headerEncoding. method-b accesses the field variables MultipartStream.head, MultipartStream.tail, MultipartStream.buffer, MultipartStream.boundary, MultipartStream.boundaryLength, in order to compute and return the position of the boundary in the buffer region. The value that method-a sets has no bearing on the values that method-b deals with in its computations.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-15-42",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 50,
        "inspection-start-time": "2022-01-04-15-42",
        "project": "commons-fileupload",
        "spec-id": "00209",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.setHeaderEncoding(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.newInputStream()Lorg/apache/commons/fileupload2/MultipartStream$ItemInputStream;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.MultipartStream$ItemInputStream",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00209.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testIOException",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1015",
                        "method-b-site": "MultipartStream.java:622",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "EXPECTED_EXCEPTION, and the exception gets thrown after method-b (and the delayed method-a) are called, commenting out method-a does not cause the test to fail."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testIOException",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable MultipartStream.headerEncoding. The value that method-a sets has no bearing on the values that method-b deals with in its computations (method-b simply creates and returns a new ItemInputStream() object).",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-04-15-45",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 51,
        "inspection-start-time": "2022-01-05-13-48",
        "project": "commons-fileupload",
        "spec-id": "00211",
        "method-a": "org.apache.commons.fileupload2.MultipartStream.setHeaderEncoding(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.MultipartStream.readHeaders()Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/ls/00211.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:1015",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable MultipartStream.headerEncoding. Upon inspection of method-b, it is evident that the value that method-a sets (headerEncoding) is used in method-b, so method-b is dependent on method-a. However, the reason that calling method-b before method-a was fine in this specific case was because the call to method-a sets headerEncoding itself to null (the argument to method-a is null). So, calling method-a had no real effect... We may be able to improve the oracle by creating a case where the input string to be parsed has a header that is encoded in some other encoding than the default (maybe UTF-16?), and checking whether the parsed header is correct? DECISION: method-a and method-b are both public, and method-b can be called without having called method-a first because it has both a then-branch and an else-branch for whether \"headerEncoding != null\" (whether method-a was called before and set a non-null value, or not). One ought to call method-a before method-b if the header to be read is encoded in a non-standard encoding, but I don't think we can encode in RV a situation where we *know* that the header is in a non-standard encoding... (potentially a SOMETIMES_TRUE_SPEC)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-05-14-07",
        "inspection-time-in-minutes": 19
    },
    {
        "iid": 52,
        "inspection-start-time": "2022-01-05-23-00",
        "project": "commons-fileupload",
        "spec-id": "00238",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.setLowerCaseNames(Z)V",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parse(Ljava/lang/String;[C)Ljava/util/Map;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.util.Map",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00238.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testWithInvalidRequest",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:421",
                        "method-b-site": "FileUploadBase.java:423",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "Technically EXPECTED_EXCEPTION, but unrelated to this spec and its DSI experiment."
            }
        ],
        "verdict": "true-spec",
        "is-oracle-weak": true,
        "spec-type": "precondition",
        "validating-test-file": "DSIValidationTest#testDSI00238",
        "notes": "The return value of method-b is sometimes dependent on whether method-a was called or not. If method-a was not called, then the keys in the return value Map object will not come out as lowercase even if the user intended it; hence it can lead to bugs. That being said, a user may not want the keys to come out as all lowercase, so in that case, one does not have to follow the spec. Thus, SOMETIMES_TRUE_SPEC.",
        "findings": "In order to encode this in RV, one would have to consider how the user will want to retrieve the values from the return value of method-b; are the keys that they are using to retrieve values from the return value of method-b in all lower case? In some sense the condition to check for surfaces *after* both method-a and method-b. One way we can tackle this is to make the spec: \"issue a violation if the user does NOT call method-a, calls method-b, and tries to retrieve a value using a key that is in all lower case, where the mixed-case version of the key is in the return value of method-b. This seems rather complicated...",
        "part-of-bigger-spec": "tbd",
        "inspection-end-time": "2022-01-05-23-18",
        "inspection-time-in-minutes": 18
    },
    {
        "iid": 53,
        "inspection-start-time": "2022-01-06-00-31",
        "project": "commons-fileupload",
        "spec-id": "00241",
        "method-a": "org.apache.commons.fileupload2.ParameterParser.setLowerCaseNames(Z)V",
        "method-b": "org.apache.commons.fileupload2.ParameterParser.parseQuotedToken([C)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/ls/00241.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ParameterParserTest#testContentTypeParsing",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "ParameterParserTest.java:73",
                        "method-b-site": "ParameterParser.java:314",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.ParameterParserTest#testContentTypeParsing",
        "notes": "GOOD_EXAMPLE! STATE_RESTORED. There's no relationship between method-a and method-b; the interesting thing is that this test (ParameterParserTest#testContentTypeParsing) is a strong test, but DSI successfully sees that this is a spurious spec because the state restoration was timed well; method-b happened **before** the critical portion of parse() where calling method-a was crucial.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-00-46",
        "inspection-time-in-minutes": 15
    },
    {
        "iid": 54,
        "inspection-start-time": "2022-01-06-00-47",
        "project": "commons-fileupload",
        "spec-id": "00243",
        "method-a": "org.apache.commons.fileupload2.RequestContext.getContentLength()I",
        "method-b": "org.apache.commons.fileupload2.RequestContext.getCharacterEncoding()Ljava/lang/String;",
        "method-a-return-type": "int",
        "method-b-return-type": "java.lang.String",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 12,
        "code-snippets-file": "snippets/ls/00243.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:964",
                        "method-b-site": "FileUploadBase.java:998",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Most likely replaced with default value 0? That being said, the return value of method-a is not actually used in the code.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "method-a is deprecated, and the code doesn't use the value returned from method-a. That being said, method-b is a getter that calls a 3rd party method, so I don't think there is a relation between the two methods. Comment: This is a great case! A taint analysis should be able to show that the return value of a does not flow to b or the assertion. I wonder if that is a general approach that can work for many cases. GOOD_EXAMPLE. Also, this could be UNRELATED_STATELESS_METHODS, but I don't really know that for sure because method-a and method-b call third party methods.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-01-04",
        "inspection-time-in-minutes": 17
    },
    {
        "iid": 55,
        "inspection-start-time": "2022-01-06-01-04",
        "project": "commons-fileupload",
        "spec-id": "00244",
        "method-a": "org.apache.commons.fileupload2.RequestContext.getContentLength()I",
        "method-b": "org.apache.commons.fileupload2.RequestContext.getInputStream()Ljava/io/InputStream;",
        "method-a-return-type": "int",
        "method-b-return-type": "java.io.InputStream",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 12,
        "code-snippets-file": "snippets/ls/00244.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "FileUploadBase.java:964",
                        "method-b-site": "FileUploadBase.java:993",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "Most likely replaced with default value 0? That being said, the return value of method-a is not actually used in the code.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileUploadTest#testMoveFile",
        "notes": "method-a is deprecated, and the code doesn't use the value returned from method-a. That being said, method-b is a getter that calls a 3rd party method, so I don't think there is a relation between the two methods. Comment: This is a great case! A taint analysis should be able to show that the return value of a does not flow to b or the assertion. I wonder if that is a general approach that can work for many cases. GOOD_EXAMPLE! Also, this could be UNRELATED_STATELESS_METHODS, but I don't really know that for sure because method-a and method-b call third party methods.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-01-19",
        "inspection-time-in-minutes": 15
    },
    {
        "iid": 56,
        "inspection-start-time": "2022-01-06-16-39",
        "project": "commons-fileupload",
        "spec-id": "00270",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.getTempFile()Ljava/io/File;",
        "method-b": "org.apache.commons.fileupload2.FileItem.getFieldName()Ljava/lang/String;",
        "method-a-return-type": "java.io.File",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/ls/00270.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItem.java:509",
                        "method-b-site": "SizesTest.java:83",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACEMENT_VALUE_UNCLEAR: Most likely replaced method-a with null, but somehow manually replacing the return value of method-a with null doesn't cause a NullPointerException. It's difficult to fully track this because the location where the NullPointerException is supposed to be thrown is in third party methods.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
        "notes": "method-a accesses and potentially modifies the field variables DiskFileItem.tempFile, and returns the field variable DiskFileItem.tempFile. The return value of method-a is used by the caller to construct a DeferredFileOutputStream object to set the field variable DiskFileItem.dfos to. ONE_STATELESS_METHOD: The only implementation of method-b is a 1-line getter to the field variable DiskFileItem.fieldName. Since the field variable that method-b is returning is not related to the field variables that method-a modifies, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-06-16-59",
        "inspection-time-in-minutes": 20
    },
    {
        "iid": 57,
        "inspection-start-time": "2022-01-07-12-43",
        "project": "commons-fileupload",
        "spec-id": "00280",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.getTempFile()Ljava/io/File;",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.isInMemory()Z",
        "method-a-return-type": "java.io.File",
        "method-b-return-type": "boolean",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00280.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItem.java:509",
                        "method-b-site": "DiskFileItem.java:301",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "REPLACEMENT_VALUE_UNCLEAR: Most likely replaced with null, but not sure why the test passed.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testFileUpload",
        "notes": "method-a accesses and potentially modifies the field variables DiskFileItem.tempFile, and returns the field variable DiskFileItem.tempFile. The return value of method-a is used by the caller to construct a DeferredFileOutputStream object to set the field variable DiskFileItem.dfos to. method-b accesses the field variables DiskFileItem.cachedContent and DiskFileItem.dfos in order to determine whether the file contents would be read from memory. TRUE_SPEC_WITH_CALLER: The caller of method-a (getOutputStream()) has a precondition relationship with method-b, but method-a itself is not related to method-b. (Unlikely to call method-a from a test because method-a is protected)",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-12-54",
        "inspection-time-in-minutes": 11
    },
    {
        "iid": 58,
        "inspection-start-time": "2022-01-07-13-15",
        "project": "commons-fileupload",
        "spec-id": "00282",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.delete()V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00282.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "DiskFileItemSerializeTest.java:86",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. method-b modifies the field variable DiskFileItem.cachedContent, and deletes the File within DiskFileItem.dfos. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-13-27",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 59,
        "inspection-start-time": "2022-01-07-13-28",
        "project": "commons-fileupload",
        "spec-id": "00283",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.get()[B",
        "method-a-return-type": "void",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 7,
        "code-snippets-file": "snippets/ls/00283.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "DiskFileItemSerializeTest.java:85",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. method-b accesses the field variables DiskFileItem.dfos, DiskFileItem.cachedContent, and DiskFileItem.size, then it potentially modifies DiskFileItem.cachedContent, and returns either DiskFileItem.cachedContent or the data of the File object within DiskFileItem.dfos. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-13-30",
        "inspection-time-in-minutes": 2
    },
    {
        "iid": 60,
        "inspection-start-time": "2022-01-07-13-30",
        "project": "commons-fileupload",
        "spec-id": "00284",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.getFieldName()Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/ls/00284.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFileUpload",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "StreamingTest.java:63",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns null.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. ONE_STATELESS_METHOD: method-b is a 1-line naive getter to the field variable DiskFileItem.fieldName. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-13-42",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 61,
        "inspection-start-time": "2022-01-07-13-42",
        "project": "commons-fileupload",
        "spec-id": "00285",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.getOutputStream()Ljava/io/OutputStream;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.io.OutputStream",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 13,
        "code-snippets-file": "snippets/ls/00285.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "DiskFileItemSerializeTest.java:212",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. method-b accesses and modifies the field variable DiskFileItem.dfos. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-13-47",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 62,
        "inspection-start-time": "2022-01-07-15-13",
        "project": "commons-fileupload",
        "spec-id": "00287",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.isInMemory()Z",
        "method-a-return-type": "void",
        "method-b-return-type": "boolean",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/ls/00287.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "DiskFileItemSerializeTest.java:83",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. method-b accesses the field variables DiskFileItem.cachedContent and DiskFileItem.dfos to return whether the file contents will be read from memory. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-15-18",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 63,
        "inspection-start-time": "2022-01-07-15-18",
        "project": "commons-fileupload",
        "spec-id": "00288",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.FileItem.setHeaders(Lorg/apache/commons/fileupload2/FileItemHeaders;)V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 4,
        "code-snippets-file": "snippets/ls/00288.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFileUpload",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "FileUploadBase.java:355",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns null.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFileUpload",
        "notes": "UNRELATED_PURE_SETTERS: method-a is a pure setter to the field variable DiskFileItem.defaultCharset, and method-b is a pure setter to the field variable DiskFileItem.headers. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-15-24",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 64,
        "inspection-start-time": "2022-01-07-15-29",
        "project": "commons-fileupload",
        "spec-id": "00290",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getStoreLocation()Ljava/io/File;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.io.File",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00290.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "DiskFileItem.java:433",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. method-b accesses the field variables DiskFileItem.dfos and DiskFileItem.cachedContent to either return null or the File within DiskFileItem.dfos. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-15-37",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 65,
        "inspection-start-time": "2022-01-07-15-37",
        "project": "commons-fileupload",
        "spec-id": "00291",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.getTempFile()Ljava/io/File;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.io.File",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 3,
        "test-methods-mine-count": 13,
        "code-snippets-file": "snippets/ls/00291.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "DiskFileItem.java:509",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.DiskFileItemSerializeTest#testBelowThreshold",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. method-b checks the field variable DiskFileItem.tempFile, modifies it if it is null, and returns that value. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-15-42",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 66,
        "inspection-start-time": "2022-01-07-15-42",
        "project": "commons-fileupload",
        "spec-id": "00292",
        "method-a": "org.apache.commons.fileupload2.disk.DiskFileItem.setDefaultCharset(Ljava/lang/String;)V",
        "method-b": "org.apache.commons.fileupload2.disk.DiskFileItem.isInMemory()Z",
        "method-a-return-type": "void",
        "method-b-return-type": "boolean",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 5,
        "code-snippets-file": "snippets/ls/00292.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.StreamingTest#testFileUpload",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "DiskFileItemFactory.java:202",
                        "method-b-site": "DiskFileItem.java:301",
                        "invocation-count": 699
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns null.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.StreamingTest#testFileUpload",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable DiskFileItem.defaultCharset. method-b accesses the field variables DiskFileItem.cachedContent and DiskFileItem.dfos and returns whether the file contents will be read from memory. The call to method-a isn't actually necessary in this context because the call to method-a simply sets DiskFileItem.defaultCharSet to the default value that it was initialized with in the variable declaration (DiskFileItem.DEFAULT_CHARSET). Plus, the getter for the variable is not used anywhere in the code, so we can consider this to potentially be a weak oracle situation. Also, the spec is spurious because method-b doesn't use/is not affected by the variable set by method-a.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-15-47",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 67,
        "inspection-start-time": "2022-01-07-22-01",
        "project": "commons-fileupload",
        "spec-id": "00315",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.FileUpload.getItemIterator(Lorg/apache/commons/fileupload2/RequestContext;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00315.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:245",
                        "method-b-site": "ServletFileUpload.java:152",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b creates and returns a new FileItemIteratorImpl object (or throws an exception). FileItemIteratorImpl() (the constructor) calls FileItemStreamImpl() uses FileUploadBase.fileSizeMax in order to evaluate whether a FileSizeExceededException ought to be thrown, so one may want to call method-a before calling method-b. However, given that it is next to impossible to know whether the user wants to call method-a (when the user wants to set a size limit on the file), and the field variable FileUploadBase.fileSizeMax is initialized on declaration, this is most likely a spurious spec. Not calling method-a at all has no bearing on the outcome of the test, because method-a sets the field variable FileUploadBase.fileSizeMax to the default value. Additionally, manually calling method-a after method-b also has no bearing on the outcome of the test. This spec is actually identical to 00322 (lv-u) besides method-b having a different class name because of DYNAMIC_DISPATCH. DECISION: there is not enough justification for marking this as a true spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-22-09",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 68,
        "inspection-start-time": "2022-01-07-22-10",
        "project": "commons-fileupload",
        "spec-id": "00316",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "void",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 3,
        "code-snippets-file": "snippets/ls/00316.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:245",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns null.",
                "notes": "EXPECTED_EXCEPTION."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b parses the String argument contentType, and returns a parsed \"boundary\" value. Not calling method-a at all has no bearing on the outcome of the test, so it seems that the oracle is weak. Additionally, manually calling method-a after method-b also has no bearing on the outcome of the test. That being said, the variable whose value is set by method-a is not used in method-b, so it should be safe to call this a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-07-22-18",
        "inspection-time-in-minutes": 8
    },
    {
        "iid": 69,
        "inspection-start-time": "2022-01-08-11-35",
        "project": "commons-fileupload",
        "spec-id": "00317",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00317.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimitWithFakedContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:151",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:160",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:169",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:180",
                        "method-b-site": "FileUploadBase.java:503",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 4,
                "comment-on-return-values": "method-a returns null.",
                "notes": "EXPECTED_EXCEPTION, but not related to this DSI experiment. STATE_RESTORED. Not calling method-a at all in the latter two context sets causes the test to fail in the call to FileItemStreamImpl(), because the test expects the content size to be larger than the maximum file size which is set by method-a. However, the fact that method-b was called before FileItemStreamImpl() meant that the delayed call to method-a restored the state. INSPECTION_TODO: mark in the snippet the location of the state restoration."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b parses the String argument pContentDisposition and returns the parsed field \"name\". However, upon inspecting the definition of method-b, it is safe to say that the spec is spurious.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-11-48",
        "inspection-time-in-minutes": 13
    },
    {
        "iid": 70,
        "inspection-start-time": "2022-01-08-11-51",
        "project": "commons-fileupload",
        "spec-id": "00318",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFieldName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00318.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimitWithFakedContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:151",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:160",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:169",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:180",
                        "method-b-site": "FileUploadBase.java:1056",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 4,
                "comment-on-return-values": "method-a returns null.",
                "notes": "EXPECTED_EXCEPTION for the caller of method-b in the latter two perturbations. Also, STATE_RESTORED. Not calling method-a at all in the latter two context sets causes the test to fail in the call to FileItemStreamImpl(), because the test expects the content size to be larger than the maximum file size which is set by method-a. However, the fact that method-b was called before FileItemStreamImpl() meant that the delayed call to method-a restored the state.  INSPECTION_TODO: mark in the snippet the location of the state restoration."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b parses the String argument pContentDisposition and returns the parsed field \"name\". Since method-b does not affect/is not affected by the field variable set by method-a, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-11-54",
        "inspection-time-in-minutes": 3
    },
    {
        "iid": 71,
        "inspection-start-time": "2022-01-08-13-53",
        "project": "commons-fileupload",
        "spec-id": "00320",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Ljava/lang/String;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00320.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimitWithFakedContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:151",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:160",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:169",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:180",
                        "method-b-site": "FileUploadBase.java:461",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 4,
                "comment-on-return-values": "method-a returns null.",
                "notes": "EXPECTED_EXCEPTION on third and fourth context sets, not directly related to this DSI experiment. STATE_RESTORED. Not calling method-a at all in the latter two context sets causes the test to fail in the call to FileItemStreamImpl(), because the test expects the content size to be larger than the maximum file size which is set by method-a. However, the fact that method-b was called before FileItemStreamImpl() meant that the delayed call to method-a restored the state.  INSPECTION_TODO: mark in the snippet the location of the state restoration."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b parses the String argument pContentDisposition and returns the parsed value with the key \"filename\". Since method-b does not affect/is not affected by FileUploadBase.fileSizeMax, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-14-03",
        "inspection-time-in-minutes": 10
    },
    {
        "iid": 72,
        "inspection-start-time": "2022-01-08-14-04",
        "project": "commons-fileupload",
        "spec-id": "00321",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getFileName(Lorg/apache/commons/fileupload2/FileItemHeaders;)Ljava/lang/String;",
        "method-a-return-type": "void",
        "method-b-return-type": "java.lang.String",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00321.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimitWithFakedContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:151",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:160",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:169",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:180",
                        "method-b-site": "FileUploadBase.java:1069",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 4,
                "comment-on-return-values": "method-a returns void.",
                "notes": "EXPECTED_EXCEPTION on third and fourth context sets, but not directly related to this DSI experiment."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b parses the CONTENT_DISPOSITION header from the argument header and returns the parsed value with the key \"filename\". Since method-b does not affect/is not affected by FileUploadBase.fileSizeMax, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-14-09",
        "inspection-time-in-minutes": 5
    },
    {
        "iid": 73,
        "inspection-start-time": "2022-01-08-14-51",
        "project": "commons-fileupload",
        "spec-id": "00323",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getParsedHeaders(Ljava/lang/String;)Lorg/apache/commons/fileupload2/FileItemHeaders;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemHeaders",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00323.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimitWithFakedContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:151",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:160",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:169",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:180",
                        "method-b-site": "FileUploadBase.java:1053",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 4,
                "comment-on-return-values": "method-a returns null.",
                "notes": "EXPECTED_EXCEPTION on third and fourth context sets, but not directly related to the DSI experiment. STATE_RESTORED. Not calling method-a at all in the latter two context sets causes the test to fail in the call to FileItemStreamImpl(), because the test expects the content size to be larger than the maximum file size which is set by method-a. However, the fact that method-b was called before FileItemStreamImpl() meant that the delayed call to method-a restored the state. INSPECTION_TODO: mark in the snippet the location of the state restoration."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b parses the String argument headerPart and returns a FileItemHeaders object containing the key/value pairs that were extracted. Since method-b does not affect/is not affected by the field variable that method-a modifies, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-15-02",
        "inspection-time-in-minutes": 11
    },
    {
        "iid": 74,
        "inspection-start-time": "2022-01-08-15-03",
        "project": "commons-fileupload",
        "spec-id": "00324",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.newFileItemHeaders()Lorg/apache/commons/fileupload2/util/FileItemHeadersImpl;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.util.FileItemHeadersImpl",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00324.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testFileSizeLimitWithFakedContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:151",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:160",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:169",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    },
                    {
                        "method-a-site": "SizesTest.java:180",
                        "method-b-site": "FileUploadBase.java:580",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 4,
                "comment-on-return-values": "method-a returns null.",
                "notes": "EXPECTED_EXCEPTION on third and fourth context sets, but not directly related to this DSI experiment. STATE_RESTORED. Not calling method-a at all in the latter two context sets causes the test to fail in the call to FileItemStreamImpl(), because the test expects the content size to be larger than the maximum file size which is set by method-a. However, the fact that method-b was called before FileItemStreamImpl() meant that the delayed call to method-a restored the state. INSPECTION_TODO: mark in the snippet the location of the state restoration."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b creates and returns a new FileItemHeadersImpl() object, which has a do-nothing constructor. Hence, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-15-07",
        "inspection-time-in-minutes": 4
    },
    {
        "iid": 75,
        "inspection-start-time": "2022-01-08-15-07",
        "project": "commons-fileupload",
        "spec-id": "00325",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.servlet.ServletFileUpload.getItemIterator(Ljavax/servlet/http/HttpServletRequest;)Lorg/apache/commons/fileupload2/FileItemIterator;",
        "method-a-return-type": "void",
        "method-b-return-type": "org.apache.commons.fileupload2.FileItemIterator",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00325.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:245",
                        "method-b-site": "SizesTest.java:257",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": true,
        "spec-type": "precondition",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax. method-b creates and returns a new FileItemIteratorImpl object (or throws an exception). FileItemIteratorImpl() (the constructor) calls FileItemStreamImpl() uses FileUploadBase.fileSizeMax in order to evaluate whether a FileSizeExceededException ought to be thrown, so one may want to call method-a before calling method-b. This method-a doesn't actually **need** to be called in this particular scenario, because it sets the fileSizeMax to its default value. This method-b is the wrapper method around 00315's method-b. One can say this test is weak because calling method-a or not has no bearing on the outcome of the test (partially because the invocation of method-a is setting the value to its default). DECISION: both methods are public and they can be called in any order. Since FileUploadBase.fileSizeMax is set to a default value upon declaration, method-a ought to only be called when the user wants to issue a file size limit. However, I think it is next to impossible to know this programmer intent automatically.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-15-19",
        "inspection-time-in-minutes": 12
    },
    {
        "iid": 76,
        "inspection-start-time": "2022-01-08-16-05",
        "project": "commons-fileupload",
        "spec-id": "00328",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setFileSizeMax(J)V",
        "method-b": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setSizeMax(J)V",
        "method-a-return-type": "void",
        "method-b-return-type": "void",
        "same-class": "yes",
        "all-tests-mined": false,
        "test-classes-mine-count": 0,
        "test-methods-mine-count": 2,
        "code-snippets-file": "snippets/ls/00328.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "SizesTest.java:245",
                        "method-b-site": "SizesTest.java:246",
                        "invocation-count": 1
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": ""
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.SizesTest#testMaxSizeLimitUnknownContentLength",
        "notes": "UNRELATED_PURE_SETTERS: method-a is a pure setter to the field variable FileUploadBase.fileSizeMax, and method-b is a pure setter to the field variable FileUploadBase.sizeMax.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-16-11",
        "inspection-time-in-minutes": 6
    },
    {
        "iid": 77,
        "inspection-start-time": "2022-01-08-16-32",
        "project": "commons-fileupload",
        "spec-id": "00330",
        "method-a": "org.apache.commons.fileupload2.servlet.ServletFileUpload.setProgressListener(Lorg/apache/commons/fileupload2/ProgressListener;)V",
        "method-b": "org.apache.commons.fileupload2.FileUploadBase.getBoundary(Ljava/lang/String;)[B",
        "method-a-return-type": "void",
        "method-b-return-type": "byte[]",
        "same-class": "inheritance",
        "all-tests-mined": false,
        "test-classes-mine-count": 1,
        "test-methods-mine-count": 1,
        "code-snippets-file": "snippets/ls/00330.java",
        "inspected-cases": [
            {
                "test": "org.apache.commons.fileupload2.ProgressListenerTest#testProgressListener",
                "stage": "stage-3-complete",
                "exception-or-assertion": "NA",
                "invocation-info": [
                    {
                        "method-a-site": "ProgressListenerTest.java:107",
                        "method-b-site": "FileUploadBase.java:1001",
                        "invocation-count": 2
                    }
                ],
                "perturbation-count": 1,
                "comment-on-return-values": "method-a returns void.",
                "notes": "STATE_RESTORED. method-a **needs** to be called before FileUploadBase.java:1007, and method-b is called right before that. Calling method-a after method-b restored the state in such a way that method-a is called before it is actually necessary. Manual inspection of method-a and method-b show that they are not related."
            }
        ],
        "verdict": "spurious-spec",
        "is-oracle-weak": false,
        "spec-type": "NA",
        "validating-test-file": "org.apache.commons.fileupload2.ProgressListenerTest#testProgressListener",
        "notes": "ONE_PURE_SETTER: method-a is a pure setter to the field variable FileUploadBase.listener. method-b parses the String argument contentType and retrieves some data from the \"boundary\" field. Since method-b does not affect/is not affected by the field variable that method-a modifies, this is a spurious spec.",
        "part-of-bigger-spec": "no",
        "inspection-end-time": "2022-01-08-16-39",
        "inspection-time-in-minutes": 7
    }
]

